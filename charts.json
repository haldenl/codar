{
    "0": {
        "type": "chart",
        "id": "0",
        "comparator": "<",
        "vlSpec": {
            "mark": "point",
            "encoding": {
                "x": {
                    "field": "origin",
                    "type": "nominal"
                }
            },
            "config": {
                "line": {
                    "point": true
                },
                "scale": {
                    "useUnaggregatedDomain": true
                }
            },
            "data": {
                "url": "cars.json"
            }
        },
        "sol": {
            "violations": {
                "nominal_x": [
                    {
                        "description": "Nominal on x channel.",
                        "type": "soft",
                        "name": "nominal_x",
                        "asp": "soft(nominal_x,E) :- channel(E,x), type(E,nominal).",
                        "weight": 3,
                        "witness": "soft(nominal_x,e0)"
                    }
                ],
                "type_n": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_n",
                        "asp": "soft(type_n,E) :- type(E,nominal).",
                        "weight": 2,
                        "witness": "soft(type_n,e0)"
                    }
                ],
                "encoding_field": [
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e0)"
                    }
                ],
                "encoding": [
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e0)"
                    }
                ],
                "only_discrete": [
                    {
                        "description": "Plots with only nominal, ordinal, binned q, or t with time unit should add either an aggregation (e.g. count) or a quantitative field.",
                        "type": "soft",
                        "name": "only_discrete",
                        "asp": "soft(only_discrete) :- not continuous(_).",
                        "weight": 30,
                        "witness": "soft(only_discrete,_placeholder)"
                    }
                ]
            },
            "facts": [
                "data(\"cars.json\")",
                "mark(point)",
                "channel(e0,x)",
                "field(e0,\"origin\")",
                "soft(nominal_x,e0)",
                "soft(type_n,e0)",
                "soft(encoding_field,e0)",
                "soft(encoding,e0)",
                "soft(only_discrete,_placeholder)",
                "type(e0,nominal)"
            ]
        }
    },
    "1": {
        "type": "chart",
        "id": "1",
        "comparator": "<",
        "vlSpec": {
            "mark": "tick",
            "encoding": {
                "x": {
                    "field": "origin",
                    "type": "nominal"
                }
            },
            "config": {
                "line": {
                    "point": true
                },
                "scale": {
                    "useUnaggregatedDomain": true
                }
            },
            "data": {
                "url": "cars.json"
            }
        },
        "sol": {
            "violations": {
                "nominal_x": [
                    {
                        "description": "Nominal on x channel.",
                        "type": "soft",
                        "name": "nominal_x",
                        "asp": "soft(nominal_x,E) :- channel(E,x), type(E,nominal).",
                        "weight": 3,
                        "witness": "soft(nominal_x,e0)"
                    }
                ],
                "type_n": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_n",
                        "asp": "soft(type_n,E) :- type(E,nominal).",
                        "weight": 2,
                        "witness": "soft(type_n,e0)"
                    }
                ],
                "encoding_field": [
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e0)"
                    }
                ],
                "encoding": [
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e0)"
                    }
                ],
                "only_discrete": [
                    {
                        "description": "Plots with only nominal, ordinal, binned q, or t with time unit should add either an aggregation (e.g. count) or a quantitative field.",
                        "type": "soft",
                        "name": "only_discrete",
                        "asp": "soft(only_discrete) :- not continuous(_).",
                        "weight": 30,
                        "witness": "soft(only_discrete,_placeholder)"
                    }
                ]
            },
            "facts": [
                "data(\"cars.json\")",
                "mark(tick)",
                "channel(e0,x)",
                "field(e0,\"origin\")",
                "soft(nominal_x,e0)",
                "soft(type_n,e0)",
                "soft(encoding_field,e0)",
                "soft(encoding,e0)",
                "soft(only_discrete,_placeholder)",
                "type(e0,nominal)"
            ]
        }
    },
    "3": {
        "type": "chart",
        "id": "3",
        "comparator": "<",
        "vlSpec": {
            "mark": "line",
            "encoding": {
                "x": {
                    "field": "origin",
                    "type": "nominal"
                }
            },
            "config": {
                "line": {
                    "point": true
                },
                "scale": {
                    "useUnaggregatedDomain": true
                }
            },
            "data": {
                "url": "cars.json"
            }
        },
        "sol": {
            "violations": {
                "nominal_x": [
                    {
                        "description": "Nominal on x channel.",
                        "type": "soft",
                        "name": "nominal_x",
                        "asp": "soft(nominal_x,E) :- channel(E,x), type(E,nominal).",
                        "weight": 3,
                        "witness": "soft(nominal_x,e0)"
                    }
                ],
                "type_n": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_n",
                        "asp": "soft(type_n,E) :- type(E,nominal).",
                        "weight": 2,
                        "witness": "soft(type_n,e0)"
                    }
                ],
                "encoding_field": [
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e0)"
                    }
                ],
                "encoding": [
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e0)"
                    }
                ],
                "only_discrete": [
                    {
                        "description": "Plots with only nominal, ordinal, binned q, or t with time unit should add either an aggregation (e.g. count) or a quantitative field.",
                        "type": "soft",
                        "name": "only_discrete",
                        "asp": "soft(only_discrete) :- not continuous(_).",
                        "weight": 30,
                        "witness": "soft(only_discrete,_placeholder)"
                    }
                ]
            },
            "facts": [
                "data(\"cars.json\")",
                "mark(line)",
                "channel(e0,x)",
                "field(e0,\"origin\")",
                "soft(nominal_x,e0)",
                "soft(type_n,e0)",
                "soft(encoding_field,e0)",
                "soft(encoding,e0)",
                "soft(only_discrete,_placeholder)",
                "type(e0,nominal)"
            ]
        }
    },
    "5": {
        "type": "chart",
        "id": "5",
        "comparator": "<",
        "vlSpec": {
            "mark": "bar",
            "encoding": {
                "x": {
                    "field": "origin",
                    "type": "nominal"
                }
            },
            "config": {
                "line": {
                    "point": true
                },
                "scale": {
                    "useUnaggregatedDomain": true
                }
            },
            "data": {
                "url": "cars.json"
            }
        },
        "sol": {
            "violations": {
                "nominal_x": [
                    {
                        "description": "Nominal on x channel.",
                        "type": "soft",
                        "name": "nominal_x",
                        "asp": "soft(nominal_x,E) :- channel(E,x), type(E,nominal).",
                        "weight": 3,
                        "witness": "soft(nominal_x,e0)"
                    }
                ],
                "type_n": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_n",
                        "asp": "soft(type_n,E) :- type(E,nominal).",
                        "weight": 2,
                        "witness": "soft(type_n,e0)"
                    }
                ],
                "encoding_field": [
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e0)"
                    }
                ],
                "encoding": [
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e0)"
                    }
                ],
                "only_discrete": [
                    {
                        "description": "Plots with only nominal, ordinal, binned q, or t with time unit should add either an aggregation (e.g. count) or a quantitative field.",
                        "type": "soft",
                        "name": "only_discrete",
                        "asp": "soft(only_discrete) :- not continuous(_).",
                        "weight": 30,
                        "witness": "soft(only_discrete,_placeholder)"
                    }
                ]
            },
            "facts": [
                "data(\"cars.json\")",
                "mark(bar)",
                "channel(e0,x)",
                "field(e0,\"origin\")",
                "soft(nominal_x,e0)",
                "soft(type_n,e0)",
                "soft(encoding_field,e0)",
                "soft(encoding,e0)",
                "soft(only_discrete,_placeholder)",
                "type(e0,nominal)"
            ]
        }
    },
    "7": {
        "type": "chart",
        "id": "7",
        "comparator": "<",
        "vlSpec": {
            "mark": "area",
            "encoding": {
                "x": {
                    "field": "origin",
                    "type": "nominal"
                }
            },
            "config": {
                "line": {
                    "point": true
                },
                "scale": {
                    "useUnaggregatedDomain": true
                }
            },
            "data": {
                "url": "cars.json"
            }
        },
        "sol": {
            "violations": {
                "nominal_x": [
                    {
                        "description": "Nominal on x channel.",
                        "type": "soft",
                        "name": "nominal_x",
                        "asp": "soft(nominal_x,E) :- channel(E,x), type(E,nominal).",
                        "weight": 3,
                        "witness": "soft(nominal_x,e0)"
                    }
                ],
                "type_n": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_n",
                        "asp": "soft(type_n,E) :- type(E,nominal).",
                        "weight": 2,
                        "witness": "soft(type_n,e0)"
                    }
                ],
                "encoding_field": [
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e0)"
                    }
                ],
                "encoding": [
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e0)"
                    }
                ],
                "only_discrete": [
                    {
                        "description": "Plots with only nominal, ordinal, binned q, or t with time unit should add either an aggregation (e.g. count) or a quantitative field.",
                        "type": "soft",
                        "name": "only_discrete",
                        "asp": "soft(only_discrete) :- not continuous(_).",
                        "weight": 30,
                        "witness": "soft(only_discrete,_placeholder)"
                    }
                ]
            },
            "facts": [
                "data(\"cars.json\")",
                "mark(area)",
                "channel(e0,x)",
                "field(e0,\"origin\")",
                "soft(nominal_x,e0)",
                "soft(type_n,e0)",
                "soft(encoding_field,e0)",
                "soft(encoding,e0)",
                "soft(only_discrete,_placeholder)",
                "type(e0,nominal)"
            ]
        }
    },
    "9": {
        "type": "chart",
        "id": "9",
        "comparator": "<",
        "vlSpec": {
            "mark": "rule",
            "encoding": {
                "x": {
                    "field": "origin",
                    "type": "nominal"
                }
            },
            "config": {
                "line": {
                    "point": true
                },
                "scale": {
                    "useUnaggregatedDomain": true
                }
            },
            "data": {
                "url": "cars.json"
            }
        },
        "sol": "unsat"
    },
    "14": {
        "type": "chart",
        "id": "14",
        "comparator": "<",
        "vlSpec": {
            "mark": "bar",
            "encoding": {
                "y": {
                    "field": "origin",
                    "type": "nominal"
                },
                "x": {
                    "aggregate": "count",
                    "type": "quantitative"
                }
            },
            "config": {
                "line": {
                    "point": true
                },
                "scale": {
                    "useUnaggregatedDomain": true
                }
            },
            "data": {
                "url": "cars.json"
            }
        },
        "sol": {
            "violations": {
                "aggregate_count": [
                    {
                        "description": "Count as aggregate op.",
                        "type": "soft",
                        "name": "aggregate_count",
                        "asp": "soft(aggregate_count,E) :- aggregate(E,count).",
                        "weight": 0,
                        "witness": "soft(aggregate_count,e1)"
                    }
                ],
                "nominal_y": [
                    {
                        "description": "Nominal on y channel.",
                        "type": "soft",
                        "name": "nominal_y",
                        "asp": "soft(nominal_y,E) :- channel(E,y), type(E,nominal).",
                        "weight": 0,
                        "witness": "soft(nominal_y,e0)"
                    }
                ],
                "type_n": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_n",
                        "asp": "soft(type_n,E) :- type(E,nominal).",
                        "weight": 2,
                        "witness": "soft(type_n,e0)"
                    }
                ],
                "type_q": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_q",
                        "asp": "soft(type_q,E) :- type(E,quantitative).",
                        "weight": 0,
                        "witness": "soft(type_q,e1)"
                    }
                ],
                "encoding_field": [
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e0)"
                    }
                ],
                "encoding": [
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e0)"
                    },
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e1)"
                    }
                ],
                "aggregate": [
                    {
                        "description": "Prefer to use raw (no aggregate).",
                        "type": "soft",
                        "name": "aggregate",
                        "asp": "soft(aggregate,E) :- aggregate(E,_).",
                        "weight": 1,
                        "witness": "soft(aggregate,e1)"
                    }
                ],
                "continuous_x": [
                    {
                        "description": "Continuous on x channel.",
                        "type": "soft",
                        "name": "continuous_x",
                        "asp": "soft(continuous_x,E) :- channel(E,x), continuous(E).",
                        "weight": 0,
                        "witness": "soft(continuous_x,e1)"
                    }
                ],
                "c_d_no_overlap_bar": [
                    {
                        "description": "Continuous by discrete for bar mark with no overlap.",
                        "type": "soft",
                        "name": "c_d_no_overlap_bar",
                        "asp": "soft(c_d_no_overlap_bar) :- is_c_d, no_overlap, mark(bar).",
                        "weight": 0,
                        "witness": "soft(c_d_no_overlap_bar,_placeholder)"
                    }
                ]
            },
            "facts": [
                "data(\"cars.json\")",
                "mark(bar)",
                "zero(e1)",
                "aggregate(e1,count)",
                "channel(e0,y)",
                "channel(e1,x)",
                "field(e0,\"origin\")",
                "soft(aggregate_count,e1)",
                "soft(nominal_y,e0)",
                "soft(type_n,e0)",
                "soft(type_q,e1)",
                "soft(encoding_field,e0)",
                "soft(encoding,e0)",
                "soft(encoding,e1)",
                "soft(aggregate,e1)",
                "type(e0,nominal)",
                "type(e1,quantitative)",
                "soft(continuous_x,e1)",
                "soft(c_d_no_overlap_bar,_placeholder)"
            ]
        }
    },
    "15": {
        "type": "chart",
        "id": "15",
        "comparator": "<",
        "vlSpec": {
            "mark": "point",
            "encoding": {
                "y": {
                    "field": "origin",
                    "type": "nominal"
                },
                "x": {
                    "aggregate": "count",
                    "type": "quantitative"
                }
            },
            "config": {
                "line": {
                    "point": true
                },
                "scale": {
                    "useUnaggregatedDomain": true
                }
            },
            "data": {
                "url": "cars.json"
            }
        },
        "sol": {
            "violations": {
                "aggregate_count": [
                    {
                        "description": "Count as aggregate op.",
                        "type": "soft",
                        "name": "aggregate_count",
                        "asp": "soft(aggregate_count,E) :- aggregate(E,count).",
                        "weight": 0,
                        "witness": "soft(aggregate_count,e1)"
                    }
                ],
                "nominal_y": [
                    {
                        "description": "Nominal on y channel.",
                        "type": "soft",
                        "name": "nominal_y",
                        "asp": "soft(nominal_y,E) :- channel(E,y), type(E,nominal).",
                        "weight": 0,
                        "witness": "soft(nominal_y,e0)"
                    }
                ],
                "type_n": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_n",
                        "asp": "soft(type_n,E) :- type(E,nominal).",
                        "weight": 2,
                        "witness": "soft(type_n,e0)"
                    }
                ],
                "type_q": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_q",
                        "asp": "soft(type_q,E) :- type(E,quantitative).",
                        "weight": 0,
                        "witness": "soft(type_q,e1)"
                    }
                ],
                "encoding_field": [
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e0)"
                    }
                ],
                "encoding": [
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e0)"
                    },
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e1)"
                    }
                ],
                "aggregate": [
                    {
                        "description": "Prefer to use raw (no aggregate).",
                        "type": "soft",
                        "name": "aggregate",
                        "asp": "soft(aggregate,E) :- aggregate(E,_).",
                        "weight": 1,
                        "witness": "soft(aggregate,e1)"
                    }
                ],
                "continuous_x": [
                    {
                        "description": "Continuous on x channel.",
                        "type": "soft",
                        "name": "continuous_x",
                        "asp": "soft(continuous_x,E) :- channel(E,x), continuous(E).",
                        "weight": 0,
                        "witness": "soft(continuous_x,e1)"
                    }
                ],
                "c_d_no_overlap_point": [
                    {
                        "description": "Continuous by discrete for point mark with no overlap.",
                        "type": "soft",
                        "name": "c_d_no_overlap_point",
                        "asp": "soft(c_d_no_overlap_point) :- is_c_d, no_overlap, mark(point).",
                        "weight": 20,
                        "witness": "soft(c_d_no_overlap_point,_placeholder)"
                    }
                ]
            },
            "facts": [
                "data(\"cars.json\")",
                "mark(point)",
                "zero(e1)",
                "aggregate(e1,count)",
                "channel(e0,y)",
                "channel(e1,x)",
                "field(e0,\"origin\")",
                "soft(aggregate_count,e1)",
                "soft(nominal_y,e0)",
                "soft(type_n,e0)",
                "soft(type_q,e1)",
                "soft(encoding_field,e0)",
                "soft(encoding,e0)",
                "soft(encoding,e1)",
                "soft(aggregate,e1)",
                "type(e0,nominal)",
                "type(e1,quantitative)",
                "soft(continuous_x,e1)",
                "soft(c_d_no_overlap_point,_placeholder)"
            ]
        }
    },
    "17": {
        "type": "chart",
        "id": "17",
        "comparator": "<",
        "vlSpec": {
            "mark": "tick",
            "encoding": {
                "y": {
                    "field": "origin",
                    "type": "nominal"
                },
                "x": {
                    "aggregate": "count",
                    "type": "quantitative"
                }
            },
            "config": {
                "line": {
                    "point": true
                },
                "scale": {
                    "useUnaggregatedDomain": true
                }
            },
            "data": {
                "url": "cars.json"
            }
        },
        "sol": {
            "violations": {
                "aggregate_count": [
                    {
                        "description": "Count as aggregate op.",
                        "type": "soft",
                        "name": "aggregate_count",
                        "asp": "soft(aggregate_count,E) :- aggregate(E,count).",
                        "weight": 0,
                        "witness": "soft(aggregate_count,e1)"
                    }
                ],
                "nominal_y": [
                    {
                        "description": "Nominal on y channel.",
                        "type": "soft",
                        "name": "nominal_y",
                        "asp": "soft(nominal_y,E) :- channel(E,y), type(E,nominal).",
                        "weight": 0,
                        "witness": "soft(nominal_y,e0)"
                    }
                ],
                "type_n": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_n",
                        "asp": "soft(type_n,E) :- type(E,nominal).",
                        "weight": 2,
                        "witness": "soft(type_n,e0)"
                    }
                ],
                "type_q": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_q",
                        "asp": "soft(type_q,E) :- type(E,quantitative).",
                        "weight": 0,
                        "witness": "soft(type_q,e1)"
                    }
                ],
                "encoding_field": [
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e0)"
                    }
                ],
                "encoding": [
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e0)"
                    },
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e1)"
                    }
                ],
                "aggregate": [
                    {
                        "description": "Prefer to use raw (no aggregate).",
                        "type": "soft",
                        "name": "aggregate",
                        "asp": "soft(aggregate,E) :- aggregate(E,_).",
                        "weight": 1,
                        "witness": "soft(aggregate,e1)"
                    }
                ],
                "continuous_x": [
                    {
                        "description": "Continuous on x channel.",
                        "type": "soft",
                        "name": "continuous_x",
                        "asp": "soft(continuous_x,E) :- channel(E,x), continuous(E).",
                        "weight": 0,
                        "witness": "soft(continuous_x,e1)"
                    }
                ],
                "c_d_no_overlap_tick": [
                    {
                        "description": "Continuous by discrete for tick mark with no overlap.",
                        "type": "soft",
                        "name": "c_d_no_overlap_tick",
                        "asp": "soft(c_d_no_overlap_tick) :- is_c_d, no_overlap, mark(tick).",
                        "weight": 25,
                        "witness": "soft(c_d_no_overlap_tick,_placeholder)"
                    }
                ]
            },
            "facts": [
                "data(\"cars.json\")",
                "mark(tick)",
                "zero(e1)",
                "aggregate(e1,count)",
                "channel(e0,y)",
                "channel(e1,x)",
                "field(e0,\"origin\")",
                "soft(aggregate_count,e1)",
                "soft(nominal_y,e0)",
                "soft(type_n,e0)",
                "soft(type_q,e1)",
                "soft(encoding_field,e0)",
                "soft(encoding,e0)",
                "soft(encoding,e1)",
                "soft(aggregate,e1)",
                "type(e0,nominal)",
                "type(e1,quantitative)",
                "soft(continuous_x,e1)",
                "soft(c_d_no_overlap_tick,_placeholder)"
            ]
        }
    },
    "19": {
        "type": "chart",
        "id": "19",
        "comparator": "<",
        "vlSpec": {
            "mark": "line",
            "encoding": {
                "y": {
                    "field": "origin",
                    "type": "nominal"
                },
                "x": {
                    "aggregate": "count",
                    "type": "quantitative"
                }
            },
            "config": {
                "line": {
                    "point": true
                },
                "scale": {
                    "useUnaggregatedDomain": true
                }
            },
            "data": {
                "url": "cars.json"
            }
        },
        "sol": {
            "violations": {
                "aggregate_count": [
                    {
                        "description": "Count as aggregate op.",
                        "type": "soft",
                        "name": "aggregate_count",
                        "asp": "soft(aggregate_count,E) :- aggregate(E,count).",
                        "weight": 0,
                        "witness": "soft(aggregate_count,e1)"
                    }
                ],
                "nominal_y": [
                    {
                        "description": "Nominal on y channel.",
                        "type": "soft",
                        "name": "nominal_y",
                        "asp": "soft(nominal_y,E) :- channel(E,y), type(E,nominal).",
                        "weight": 0,
                        "witness": "soft(nominal_y,e0)"
                    }
                ],
                "type_n": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_n",
                        "asp": "soft(type_n,E) :- type(E,nominal).",
                        "weight": 2,
                        "witness": "soft(type_n,e0)"
                    }
                ],
                "type_q": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_q",
                        "asp": "soft(type_q,E) :- type(E,quantitative).",
                        "weight": 0,
                        "witness": "soft(type_q,e1)"
                    }
                ],
                "encoding_field": [
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e0)"
                    }
                ],
                "encoding": [
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e0)"
                    },
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e1)"
                    }
                ],
                "aggregate": [
                    {
                        "description": "Prefer to use raw (no aggregate).",
                        "type": "soft",
                        "name": "aggregate",
                        "asp": "soft(aggregate,E) :- aggregate(E,_).",
                        "weight": 1,
                        "witness": "soft(aggregate,e1)"
                    }
                ],
                "continuous_x": [
                    {
                        "description": "Continuous on x channel.",
                        "type": "soft",
                        "name": "continuous_x",
                        "asp": "soft(continuous_x,E) :- channel(E,x), continuous(E).",
                        "weight": 0,
                        "witness": "soft(continuous_x,e1)"
                    }
                ],
                "c_d_no_overlap_line": [
                    {
                        "description": "Continuous by discrete for line mark with no overlap.",
                        "type": "soft",
                        "name": "c_d_no_overlap_line",
                        "asp": "soft(c_d_no_overlap_line) :- is_c_d, no_overlap, mark(line).",
                        "weight": 20,
                        "witness": "soft(c_d_no_overlap_line,_placeholder)"
                    }
                ]
            },
            "facts": [
                "data(\"cars.json\")",
                "mark(line)",
                "zero(e1)",
                "aggregate(e1,count)",
                "channel(e0,y)",
                "channel(e1,x)",
                "field(e0,\"origin\")",
                "soft(aggregate_count,e1)",
                "soft(nominal_y,e0)",
                "soft(type_n,e0)",
                "soft(type_q,e1)",
                "soft(encoding_field,e0)",
                "soft(encoding,e0)",
                "soft(encoding,e1)",
                "soft(aggregate,e1)",
                "type(e0,nominal)",
                "type(e1,quantitative)",
                "soft(continuous_x,e1)",
                "soft(c_d_no_overlap_line,_placeholder)"
            ]
        }
    },
    "21": {
        "type": "chart",
        "id": "21",
        "comparator": "<",
        "vlSpec": {
            "mark": "area",
            "encoding": {
                "y": {
                    "field": "origin",
                    "type": "nominal"
                },
                "x": {
                    "aggregate": "count",
                    "type": "quantitative"
                }
            },
            "config": {
                "line": {
                    "point": true
                },
                "scale": {
                    "useUnaggregatedDomain": true
                }
            },
            "data": {
                "url": "cars.json"
            }
        },
        "sol": {
            "violations": {
                "aggregate_count": [
                    {
                        "description": "Count as aggregate op.",
                        "type": "soft",
                        "name": "aggregate_count",
                        "asp": "soft(aggregate_count,E) :- aggregate(E,count).",
                        "weight": 0,
                        "witness": "soft(aggregate_count,e1)"
                    }
                ],
                "nominal_y": [
                    {
                        "description": "Nominal on y channel.",
                        "type": "soft",
                        "name": "nominal_y",
                        "asp": "soft(nominal_y,E) :- channel(E,y), type(E,nominal).",
                        "weight": 0,
                        "witness": "soft(nominal_y,e0)"
                    }
                ],
                "type_n": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_n",
                        "asp": "soft(type_n,E) :- type(E,nominal).",
                        "weight": 2,
                        "witness": "soft(type_n,e0)"
                    }
                ],
                "type_q": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_q",
                        "asp": "soft(type_q,E) :- type(E,quantitative).",
                        "weight": 0,
                        "witness": "soft(type_q,e1)"
                    }
                ],
                "encoding_field": [
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e0)"
                    }
                ],
                "encoding": [
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e0)"
                    },
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e1)"
                    }
                ],
                "aggregate": [
                    {
                        "description": "Prefer to use raw (no aggregate).",
                        "type": "soft",
                        "name": "aggregate",
                        "asp": "soft(aggregate,E) :- aggregate(E,_).",
                        "weight": 1,
                        "witness": "soft(aggregate,e1)"
                    }
                ],
                "continuous_x": [
                    {
                        "description": "Continuous on x channel.",
                        "type": "soft",
                        "name": "continuous_x",
                        "asp": "soft(continuous_x,E) :- channel(E,x), continuous(E).",
                        "weight": 0,
                        "witness": "soft(continuous_x,e1)"
                    }
                ],
                "c_d_no_overlap_area": [
                    {
                        "description": "Continuous by discrete for area mark with no overlap.",
                        "type": "soft",
                        "name": "c_d_no_overlap_area",
                        "asp": "soft(c_d_no_overlap_area) :- is_c_d, no_overlap, mark(area).",
                        "weight": 20,
                        "witness": "soft(c_d_no_overlap_area,_placeholder)"
                    }
                ]
            },
            "facts": [
                "data(\"cars.json\")",
                "mark(area)",
                "zero(e1)",
                "aggregate(e1,count)",
                "channel(e0,y)",
                "channel(e1,x)",
                "field(e0,\"origin\")",
                "soft(aggregate_count,e1)",
                "soft(nominal_y,e0)",
                "soft(type_n,e0)",
                "soft(type_q,e1)",
                "soft(encoding_field,e0)",
                "soft(encoding,e0)",
                "soft(encoding,e1)",
                "soft(aggregate,e1)",
                "type(e0,nominal)",
                "type(e1,quantitative)",
                "soft(continuous_x,e1)",
                "soft(c_d_no_overlap_area,_placeholder)"
            ]
        }
    },
    "23": {
        "type": "chart",
        "id": "23",
        "comparator": "<",
        "vlSpec": {
            "mark": "rule",
            "encoding": {
                "y": {
                    "field": "origin",
                    "type": "nominal"
                },
                "x": {
                    "aggregate": "count",
                    "type": "quantitative"
                }
            },
            "config": {
                "line": {
                    "point": true
                },
                "scale": {
                    "useUnaggregatedDomain": true
                }
            },
            "data": {
                "url": "cars.json"
            }
        },
        "sol": "unsat"
    },
    "26": {
        "type": "chart",
        "id": "26",
        "comparator": "<",
        "vlSpec": {
            "mark": "bar",
            "encoding": {
                "y": {
                    "field": "cylinders",
                    "type": "ordinal"
                },
                "x": {
                    "aggregate": "count",
                    "type": "quantitative"
                }
            },
            "config": {
                "line": {
                    "point": true
                },
                "scale": {
                    "useUnaggregatedDomain": true
                }
            },
            "data": {
                "url": "cars.json"
            }
        },
        "sol": {
            "violations": {
                "aggregate_count": [
                    {
                        "description": "Count as aggregate op.",
                        "type": "soft",
                        "name": "aggregate_count",
                        "asp": "soft(aggregate_count,E) :- aggregate(E,count).",
                        "weight": 0,
                        "witness": "soft(aggregate_count,e1)"
                    }
                ],
                "type_o": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_o",
                        "asp": "soft(type_o,E) :- type(E,ordinal).",
                        "weight": 1,
                        "witness": "soft(type_o,e0)"
                    }
                ],
                "type_q": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_q",
                        "asp": "soft(type_q,E) :- type(E,quantitative).",
                        "weight": 0,
                        "witness": "soft(type_q,e1)"
                    }
                ],
                "encoding_field": [
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e0)"
                    }
                ],
                "encoding": [
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e0)"
                    },
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e1)"
                    }
                ],
                "aggregate": [
                    {
                        "description": "Prefer to use raw (no aggregate).",
                        "type": "soft",
                        "name": "aggregate",
                        "asp": "soft(aggregate,E) :- aggregate(E,_).",
                        "weight": 1,
                        "witness": "soft(aggregate,e1)"
                    }
                ],
                "continuous_x": [
                    {
                        "description": "Continuous on x channel.",
                        "type": "soft",
                        "name": "continuous_x",
                        "asp": "soft(continuous_x,E) :- channel(E,x), continuous(E).",
                        "weight": 0,
                        "witness": "soft(continuous_x,e1)"
                    }
                ],
                "ordered_y": [
                    {
                        "description": "Ordered on y channel.",
                        "type": "soft",
                        "name": "ordered_y",
                        "asp": "soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).",
                        "weight": 0,
                        "witness": "soft(ordered_y,e0)"
                    }
                ],
                "c_d_no_overlap_bar": [
                    {
                        "description": "Continuous by discrete for bar mark with no overlap.",
                        "type": "soft",
                        "name": "c_d_no_overlap_bar",
                        "asp": "soft(c_d_no_overlap_bar) :- is_c_d, no_overlap, mark(bar).",
                        "weight": 0,
                        "witness": "soft(c_d_no_overlap_bar,_placeholder)"
                    }
                ]
            },
            "facts": [
                "data(\"cars.json\")",
                "mark(bar)",
                "zero(e1)",
                "aggregate(e1,count)",
                "channel(e0,y)",
                "channel(e1,x)",
                "field(e0,\"cylinders\")",
                "soft(aggregate_count,e1)",
                "soft(type_o,e0)",
                "soft(type_q,e1)",
                "soft(encoding_field,e0)",
                "soft(encoding,e0)",
                "soft(encoding,e1)",
                "soft(aggregate,e1)",
                "type(e0,ordinal)",
                "type(e1,quantitative)",
                "soft(continuous_x,e1)",
                "soft(ordered_y,e0)",
                "soft(c_d_no_overlap_bar,_placeholder)"
            ]
        }
    },
    "27": {
        "type": "chart",
        "id": "27",
        "comparator": "<",
        "vlSpec": {
            "mark": "point",
            "encoding": {
                "y": {
                    "field": "cylinders",
                    "type": "ordinal"
                },
                "x": {
                    "aggregate": "count",
                    "type": "quantitative"
                }
            },
            "config": {
                "line": {
                    "point": true
                },
                "scale": {
                    "useUnaggregatedDomain": true
                }
            },
            "data": {
                "url": "cars.json"
            }
        },
        "sol": {
            "violations": {
                "aggregate_count": [
                    {
                        "description": "Count as aggregate op.",
                        "type": "soft",
                        "name": "aggregate_count",
                        "asp": "soft(aggregate_count,E) :- aggregate(E,count).",
                        "weight": 0,
                        "witness": "soft(aggregate_count,e1)"
                    }
                ],
                "type_o": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_o",
                        "asp": "soft(type_o,E) :- type(E,ordinal).",
                        "weight": 1,
                        "witness": "soft(type_o,e0)"
                    }
                ],
                "type_q": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_q",
                        "asp": "soft(type_q,E) :- type(E,quantitative).",
                        "weight": 0,
                        "witness": "soft(type_q,e1)"
                    }
                ],
                "encoding_field": [
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e0)"
                    }
                ],
                "encoding": [
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e0)"
                    },
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e1)"
                    }
                ],
                "aggregate": [
                    {
                        "description": "Prefer to use raw (no aggregate).",
                        "type": "soft",
                        "name": "aggregate",
                        "asp": "soft(aggregate,E) :- aggregate(E,_).",
                        "weight": 1,
                        "witness": "soft(aggregate,e1)"
                    }
                ],
                "continuous_x": [
                    {
                        "description": "Continuous on x channel.",
                        "type": "soft",
                        "name": "continuous_x",
                        "asp": "soft(continuous_x,E) :- channel(E,x), continuous(E).",
                        "weight": 0,
                        "witness": "soft(continuous_x,e1)"
                    }
                ],
                "ordered_y": [
                    {
                        "description": "Ordered on y channel.",
                        "type": "soft",
                        "name": "ordered_y",
                        "asp": "soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).",
                        "weight": 0,
                        "witness": "soft(ordered_y,e0)"
                    }
                ],
                "c_d_no_overlap_point": [
                    {
                        "description": "Continuous by discrete for point mark with no overlap.",
                        "type": "soft",
                        "name": "c_d_no_overlap_point",
                        "asp": "soft(c_d_no_overlap_point) :- is_c_d, no_overlap, mark(point).",
                        "weight": 20,
                        "witness": "soft(c_d_no_overlap_point,_placeholder)"
                    }
                ]
            },
            "facts": [
                "data(\"cars.json\")",
                "mark(point)",
                "zero(e1)",
                "aggregate(e1,count)",
                "channel(e0,y)",
                "channel(e1,x)",
                "field(e0,\"cylinders\")",
                "soft(aggregate_count,e1)",
                "soft(type_o,e0)",
                "soft(type_q,e1)",
                "soft(encoding_field,e0)",
                "soft(encoding,e0)",
                "soft(encoding,e1)",
                "soft(aggregate,e1)",
                "type(e0,ordinal)",
                "type(e1,quantitative)",
                "soft(continuous_x,e1)",
                "soft(ordered_y,e0)",
                "soft(c_d_no_overlap_point,_placeholder)"
            ]
        }
    },
    "29": {
        "type": "chart",
        "id": "29",
        "comparator": "<",
        "vlSpec": {
            "mark": "tick",
            "encoding": {
                "y": {
                    "field": "cylinders",
                    "type": "ordinal"
                },
                "x": {
                    "aggregate": "count",
                    "type": "quantitative"
                }
            },
            "config": {
                "line": {
                    "point": true
                },
                "scale": {
                    "useUnaggregatedDomain": true
                }
            },
            "data": {
                "url": "cars.json"
            }
        },
        "sol": {
            "violations": {
                "aggregate_count": [
                    {
                        "description": "Count as aggregate op.",
                        "type": "soft",
                        "name": "aggregate_count",
                        "asp": "soft(aggregate_count,E) :- aggregate(E,count).",
                        "weight": 0,
                        "witness": "soft(aggregate_count,e1)"
                    }
                ],
                "type_o": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_o",
                        "asp": "soft(type_o,E) :- type(E,ordinal).",
                        "weight": 1,
                        "witness": "soft(type_o,e0)"
                    }
                ],
                "type_q": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_q",
                        "asp": "soft(type_q,E) :- type(E,quantitative).",
                        "weight": 0,
                        "witness": "soft(type_q,e1)"
                    }
                ],
                "encoding_field": [
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e0)"
                    }
                ],
                "encoding": [
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e0)"
                    },
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e1)"
                    }
                ],
                "aggregate": [
                    {
                        "description": "Prefer to use raw (no aggregate).",
                        "type": "soft",
                        "name": "aggregate",
                        "asp": "soft(aggregate,E) :- aggregate(E,_).",
                        "weight": 1,
                        "witness": "soft(aggregate,e1)"
                    }
                ],
                "continuous_x": [
                    {
                        "description": "Continuous on x channel.",
                        "type": "soft",
                        "name": "continuous_x",
                        "asp": "soft(continuous_x,E) :- channel(E,x), continuous(E).",
                        "weight": 0,
                        "witness": "soft(continuous_x,e1)"
                    }
                ],
                "ordered_y": [
                    {
                        "description": "Ordered on y channel.",
                        "type": "soft",
                        "name": "ordered_y",
                        "asp": "soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).",
                        "weight": 0,
                        "witness": "soft(ordered_y,e0)"
                    }
                ],
                "c_d_no_overlap_tick": [
                    {
                        "description": "Continuous by discrete for tick mark with no overlap.",
                        "type": "soft",
                        "name": "c_d_no_overlap_tick",
                        "asp": "soft(c_d_no_overlap_tick) :- is_c_d, no_overlap, mark(tick).",
                        "weight": 25,
                        "witness": "soft(c_d_no_overlap_tick,_placeholder)"
                    }
                ]
            },
            "facts": [
                "data(\"cars.json\")",
                "mark(tick)",
                "zero(e1)",
                "aggregate(e1,count)",
                "channel(e0,y)",
                "channel(e1,x)",
                "field(e0,\"cylinders\")",
                "soft(aggregate_count,e1)",
                "soft(type_o,e0)",
                "soft(type_q,e1)",
                "soft(encoding_field,e0)",
                "soft(encoding,e0)",
                "soft(encoding,e1)",
                "soft(aggregate,e1)",
                "type(e0,ordinal)",
                "type(e1,quantitative)",
                "soft(continuous_x,e1)",
                "soft(ordered_y,e0)",
                "soft(c_d_no_overlap_tick,_placeholder)"
            ]
        }
    },
    "31": {
        "type": "chart",
        "id": "31",
        "comparator": "<",
        "vlSpec": {
            "mark": "line",
            "encoding": {
                "y": {
                    "field": "cylinders",
                    "type": "ordinal"
                },
                "x": {
                    "aggregate": "count",
                    "type": "quantitative"
                }
            },
            "config": {
                "line": {
                    "point": true
                },
                "scale": {
                    "useUnaggregatedDomain": true
                }
            },
            "data": {
                "url": "cars.json"
            }
        },
        "sol": {
            "violations": {
                "aggregate_count": [
                    {
                        "description": "Count as aggregate op.",
                        "type": "soft",
                        "name": "aggregate_count",
                        "asp": "soft(aggregate_count,E) :- aggregate(E,count).",
                        "weight": 0,
                        "witness": "soft(aggregate_count,e1)"
                    }
                ],
                "type_o": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_o",
                        "asp": "soft(type_o,E) :- type(E,ordinal).",
                        "weight": 1,
                        "witness": "soft(type_o,e0)"
                    }
                ],
                "type_q": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_q",
                        "asp": "soft(type_q,E) :- type(E,quantitative).",
                        "weight": 0,
                        "witness": "soft(type_q,e1)"
                    }
                ],
                "encoding_field": [
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e0)"
                    }
                ],
                "encoding": [
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e0)"
                    },
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e1)"
                    }
                ],
                "aggregate": [
                    {
                        "description": "Prefer to use raw (no aggregate).",
                        "type": "soft",
                        "name": "aggregate",
                        "asp": "soft(aggregate,E) :- aggregate(E,_).",
                        "weight": 1,
                        "witness": "soft(aggregate,e1)"
                    }
                ],
                "continuous_x": [
                    {
                        "description": "Continuous on x channel.",
                        "type": "soft",
                        "name": "continuous_x",
                        "asp": "soft(continuous_x,E) :- channel(E,x), continuous(E).",
                        "weight": 0,
                        "witness": "soft(continuous_x,e1)"
                    }
                ],
                "ordered_y": [
                    {
                        "description": "Ordered on y channel.",
                        "type": "soft",
                        "name": "ordered_y",
                        "asp": "soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).",
                        "weight": 0,
                        "witness": "soft(ordered_y,e0)"
                    }
                ],
                "c_d_no_overlap_line": [
                    {
                        "description": "Continuous by discrete for line mark with no overlap.",
                        "type": "soft",
                        "name": "c_d_no_overlap_line",
                        "asp": "soft(c_d_no_overlap_line) :- is_c_d, no_overlap, mark(line).",
                        "weight": 20,
                        "witness": "soft(c_d_no_overlap_line,_placeholder)"
                    }
                ]
            },
            "facts": [
                "data(\"cars.json\")",
                "mark(line)",
                "zero(e1)",
                "aggregate(e1,count)",
                "channel(e0,y)",
                "channel(e1,x)",
                "field(e0,\"cylinders\")",
                "soft(aggregate_count,e1)",
                "soft(type_o,e0)",
                "soft(type_q,e1)",
                "soft(encoding_field,e0)",
                "soft(encoding,e0)",
                "soft(encoding,e1)",
                "soft(aggregate,e1)",
                "type(e0,ordinal)",
                "type(e1,quantitative)",
                "soft(continuous_x,e1)",
                "soft(ordered_y,e0)",
                "soft(c_d_no_overlap_line,_placeholder)"
            ]
        }
    },
    "33": {
        "type": "chart",
        "id": "33",
        "comparator": "<",
        "vlSpec": {
            "mark": "area",
            "encoding": {
                "y": {
                    "field": "cylinders",
                    "type": "ordinal"
                },
                "x": {
                    "aggregate": "count",
                    "type": "quantitative"
                }
            },
            "config": {
                "line": {
                    "point": true
                },
                "scale": {
                    "useUnaggregatedDomain": true
                }
            },
            "data": {
                "url": "cars.json"
            }
        },
        "sol": {
            "violations": {
                "aggregate_count": [
                    {
                        "description": "Count as aggregate op.",
                        "type": "soft",
                        "name": "aggregate_count",
                        "asp": "soft(aggregate_count,E) :- aggregate(E,count).",
                        "weight": 0,
                        "witness": "soft(aggregate_count,e1)"
                    }
                ],
                "type_o": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_o",
                        "asp": "soft(type_o,E) :- type(E,ordinal).",
                        "weight": 1,
                        "witness": "soft(type_o,e0)"
                    }
                ],
                "type_q": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_q",
                        "asp": "soft(type_q,E) :- type(E,quantitative).",
                        "weight": 0,
                        "witness": "soft(type_q,e1)"
                    }
                ],
                "encoding_field": [
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e0)"
                    }
                ],
                "encoding": [
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e0)"
                    },
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e1)"
                    }
                ],
                "aggregate": [
                    {
                        "description": "Prefer to use raw (no aggregate).",
                        "type": "soft",
                        "name": "aggregate",
                        "asp": "soft(aggregate,E) :- aggregate(E,_).",
                        "weight": 1,
                        "witness": "soft(aggregate,e1)"
                    }
                ],
                "continuous_x": [
                    {
                        "description": "Continuous on x channel.",
                        "type": "soft",
                        "name": "continuous_x",
                        "asp": "soft(continuous_x,E) :- channel(E,x), continuous(E).",
                        "weight": 0,
                        "witness": "soft(continuous_x,e1)"
                    }
                ],
                "ordered_y": [
                    {
                        "description": "Ordered on y channel.",
                        "type": "soft",
                        "name": "ordered_y",
                        "asp": "soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).",
                        "weight": 0,
                        "witness": "soft(ordered_y,e0)"
                    }
                ],
                "c_d_no_overlap_area": [
                    {
                        "description": "Continuous by discrete for area mark with no overlap.",
                        "type": "soft",
                        "name": "c_d_no_overlap_area",
                        "asp": "soft(c_d_no_overlap_area) :- is_c_d, no_overlap, mark(area).",
                        "weight": 20,
                        "witness": "soft(c_d_no_overlap_area,_placeholder)"
                    }
                ]
            },
            "facts": [
                "data(\"cars.json\")",
                "mark(area)",
                "zero(e1)",
                "aggregate(e1,count)",
                "channel(e0,y)",
                "channel(e1,x)",
                "field(e0,\"cylinders\")",
                "soft(aggregate_count,e1)",
                "soft(type_o,e0)",
                "soft(type_q,e1)",
                "soft(encoding_field,e0)",
                "soft(encoding,e0)",
                "soft(encoding,e1)",
                "soft(aggregate,e1)",
                "type(e0,ordinal)",
                "type(e1,quantitative)",
                "soft(continuous_x,e1)",
                "soft(ordered_y,e0)",
                "soft(c_d_no_overlap_area,_placeholder)"
            ]
        }
    },
    "35": {
        "type": "chart",
        "id": "35",
        "comparator": "<",
        "vlSpec": {
            "mark": "rule",
            "encoding": {
                "y": {
                    "field": "cylinders",
                    "type": "ordinal"
                },
                "x": {
                    "aggregate": "count",
                    "type": "quantitative"
                }
            },
            "config": {
                "line": {
                    "point": true
                },
                "scale": {
                    "useUnaggregatedDomain": true
                }
            },
            "data": {
                "url": "cars.json"
            }
        },
        "sol": "unsat"
    },
    "38": {
        "type": "chart",
        "id": "38",
        "comparator": "<",
        "vlSpec": {
            "mark": "tick",
            "encoding": {
                "x": {
                    "field": "horsepower",
                    "type": "quantitative"
                }
            },
            "config": {
                "line": {
                    "point": true
                },
                "scale": {
                    "useUnaggregatedDomain": true
                }
            },
            "data": {
                "url": "cars.json"
            }
        },
        "sol": {
            "violations": {
                "type_q": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_q",
                        "asp": "soft(type_q,E) :- type(E,quantitative).",
                        "weight": 0,
                        "witness": "soft(type_q,e0)"
                    }
                ],
                "encoding_field": [
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e0)"
                    }
                ],
                "encoding": [
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e0)"
                    }
                ],
                "continuous_x": [
                    {
                        "description": "Continuous on x channel.",
                        "type": "soft",
                        "name": "continuous_x",
                        "asp": "soft(continuous_x,E) :- channel(E,x), continuous(E).",
                        "weight": 0,
                        "witness": "soft(continuous_x,e0)"
                    }
                ],
                "c_d_tick": [
                    {
                        "description": "Continuous by discrete for tick mark.",
                        "type": "soft",
                        "name": "c_d_tick",
                        "asp": "soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).",
                        "weight": 0,
                        "witness": "soft(c_d_tick,_placeholder)"
                    }
                ]
            },
            "facts": [
                "data(\"cars.json\")",
                "mark(tick)",
                "zero(e0)",
                "channel(e0,x)",
                "field(e0,\"horsepower\")",
                "soft(type_q,e0)",
                "soft(encoding_field,e0)",
                "soft(encoding,e0)",
                "type(e0,quantitative)",
                "soft(continuous_x,e0)",
                "soft(c_d_tick,_placeholder)"
            ]
        }
    },
    "39": {
        "type": "chart",
        "id": "39",
        "comparator": "<",
        "vlSpec": {
            "mark": "point",
            "encoding": {
                "x": {
                    "field": "horsepower",
                    "type": "quantitative"
                }
            },
            "config": {
                "line": {
                    "point": true
                },
                "scale": {
                    "useUnaggregatedDomain": true
                }
            },
            "data": {
                "url": "cars.json"
            }
        },
        "sol": {
            "violations": {
                "type_q": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_q",
                        "asp": "soft(type_q,E) :- type(E,quantitative).",
                        "weight": 0,
                        "witness": "soft(type_q,e0)"
                    }
                ],
                "encoding_field": [
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e0)"
                    }
                ],
                "encoding": [
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e0)"
                    }
                ],
                "continuous_x": [
                    {
                        "description": "Continuous on x channel.",
                        "type": "soft",
                        "name": "continuous_x",
                        "asp": "soft(continuous_x,E) :- channel(E,x), continuous(E).",
                        "weight": 0,
                        "witness": "soft(continuous_x,e0)"
                    }
                ],
                "c_d_point": [
                    {
                        "description": "Continuous by discrete for point mark.",
                        "type": "soft",
                        "name": "c_d_point",
                        "asp": "soft(c_d_point) :- is_c_d, not no_overlap, mark(point).",
                        "weight": 10,
                        "witness": "soft(c_d_point,_placeholder)"
                    }
                ]
            },
            "facts": [
                "data(\"cars.json\")",
                "mark(point)",
                "zero(e0)",
                "channel(e0,x)",
                "field(e0,\"horsepower\")",
                "soft(type_q,e0)",
                "soft(encoding_field,e0)",
                "soft(encoding,e0)",
                "type(e0,quantitative)",
                "soft(continuous_x,e0)",
                "soft(c_d_point,_placeholder)"
            ]
        }
    },
    "41": {
        "type": "chart",
        "id": "41",
        "comparator": "<",
        "vlSpec": {
            "mark": "line",
            "encoding": {
                "x": {
                    "field": "horsepower",
                    "type": "quantitative"
                }
            },
            "config": {
                "line": {
                    "point": true
                },
                "scale": {
                    "useUnaggregatedDomain": true
                }
            },
            "data": {
                "url": "cars.json"
            }
        },
        "sol": {
            "violations": {
                "type_q": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_q",
                        "asp": "soft(type_q,E) :- type(E,quantitative).",
                        "weight": 0,
                        "witness": "soft(type_q,e0)"
                    }
                ],
                "encoding_field": [
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e0)"
                    }
                ],
                "encoding": [
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e0)"
                    }
                ],
                "continuous_x": [
                    {
                        "description": "Continuous on x channel.",
                        "type": "soft",
                        "name": "continuous_x",
                        "asp": "soft(continuous_x,E) :- channel(E,x), continuous(E).",
                        "weight": 0,
                        "witness": "soft(continuous_x,e0)"
                    }
                ],
                "c_d_line": [
                    {
                        "description": "Continuous by discrete for line mark.",
                        "type": "soft",
                        "name": "c_d_line",
                        "asp": "soft(c_d_line) :- is_c_d, not no_overlap, mark(line).",
                        "weight": 20,
                        "witness": "soft(c_d_line,_placeholder)"
                    }
                ]
            },
            "facts": [
                "data(\"cars.json\")",
                "mark(line)",
                "zero(e0)",
                "channel(e0,x)",
                "field(e0,\"horsepower\")",
                "soft(type_q,e0)",
                "soft(encoding_field,e0)",
                "soft(encoding,e0)",
                "type(e0,quantitative)",
                "soft(continuous_x,e0)",
                "soft(c_d_line,_placeholder)"
            ]
        }
    },
    "43": {
        "type": "chart",
        "id": "43",
        "comparator": "<",
        "vlSpec": {
            "mark": "bar",
            "encoding": {
                "x": {
                    "field": "horsepower",
                    "type": "quantitative"
                }
            },
            "config": {
                "line": {
                    "point": true
                },
                "scale": {
                    "useUnaggregatedDomain": true
                }
            },
            "data": {
                "url": "cars.json"
            }
        },
        "sol": {
            "violations": {
                "type_q": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_q",
                        "asp": "soft(type_q,E) :- type(E,quantitative).",
                        "weight": 0,
                        "witness": "soft(type_q,e0)"
                    }
                ],
                "encoding_field": [
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e0)"
                    }
                ],
                "encoding": [
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e0)"
                    }
                ],
                "continuous_x": [
                    {
                        "description": "Continuous on x channel.",
                        "type": "soft",
                        "name": "continuous_x",
                        "asp": "soft(continuous_x,E) :- channel(E,x), continuous(E).",
                        "weight": 0,
                        "witness": "soft(continuous_x,e0)"
                    }
                ],
                "c_d_bar": [
                    {
                        "description": "Continuous by discrete for bar mark.",
                        "type": "soft",
                        "name": "c_d_bar",
                        "asp": "soft(c_d_bar) :- is_c_d, not no_overlap, mark(bar).",
                        "weight": 20,
                        "witness": "soft(c_d_bar,_placeholder)"
                    }
                ]
            },
            "facts": [
                "data(\"cars.json\")",
                "mark(bar)",
                "zero(e0)",
                "channel(e0,x)",
                "field(e0,\"horsepower\")",
                "soft(type_q,e0)",
                "soft(encoding_field,e0)",
                "soft(encoding,e0)",
                "type(e0,quantitative)",
                "soft(continuous_x,e0)",
                "soft(c_d_bar,_placeholder)"
            ]
        }
    },
    "45": {
        "type": "chart",
        "id": "45",
        "comparator": "<",
        "vlSpec": {
            "mark": "area",
            "encoding": {
                "x": {
                    "field": "horsepower",
                    "type": "quantitative"
                }
            },
            "config": {
                "line": {
                    "point": true
                },
                "scale": {
                    "useUnaggregatedDomain": true
                }
            },
            "data": {
                "url": "cars.json"
            }
        },
        "sol": {
            "violations": {
                "type_q": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_q",
                        "asp": "soft(type_q,E) :- type(E,quantitative).",
                        "weight": 0,
                        "witness": "soft(type_q,e0)"
                    }
                ],
                "encoding_field": [
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e0)"
                    }
                ],
                "encoding": [
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e0)"
                    }
                ],
                "continuous_x": [
                    {
                        "description": "Continuous on x channel.",
                        "type": "soft",
                        "name": "continuous_x",
                        "asp": "soft(continuous_x,E) :- channel(E,x), continuous(E).",
                        "weight": 0,
                        "witness": "soft(continuous_x,e0)"
                    }
                ],
                "c_d_area": [
                    {
                        "description": "Continuous by discrete for area mark.",
                        "type": "soft",
                        "name": "c_d_area",
                        "asp": "soft(c_d_area) :- is_c_d, not no_overlap, mark(area).",
                        "weight": 20,
                        "witness": "soft(c_d_area,_placeholder)"
                    }
                ]
            },
            "facts": [
                "data(\"cars.json\")",
                "mark(area)",
                "zero(e0)",
                "channel(e0,x)",
                "field(e0,\"horsepower\")",
                "soft(type_q,e0)",
                "soft(encoding_field,e0)",
                "soft(encoding,e0)",
                "type(e0,quantitative)",
                "soft(continuous_x,e0)",
                "soft(c_d_area,_placeholder)"
            ]
        }
    },
    "47": {
        "type": "chart",
        "id": "47",
        "comparator": "<",
        "vlSpec": {
            "mark": "rule",
            "encoding": {
                "x": {
                    "field": "horsepower",
                    "type": "quantitative"
                }
            },
            "config": {
                "line": {
                    "point": true
                },
                "scale": {
                    "useUnaggregatedDomain": true
                }
            },
            "data": {
                "url": "cars.json"
            }
        },
        "sol": "unsat"
    },
    "52": {
        "type": "chart",
        "id": "52",
        "comparator": "<",
        "vlSpec": {
            "mark": "bar",
            "encoding": {
                "x": {
                    "bin": true,
                    "field": "horsepower",
                    "type": "quantitative"
                },
                "y": {
                    "aggregate": "count",
                    "type": "quantitative"
                }
            },
            "config": {
                "line": {
                    "point": true
                },
                "scale": {
                    "useUnaggregatedDomain": true
                }
            },
            "data": {
                "url": "cars.json"
            }
        },
        "sol": {
            "violations": {
                "aggregate_count": [
                    {
                        "description": "Count as aggregate op.",
                        "type": "soft",
                        "name": "aggregate_count",
                        "asp": "soft(aggregate_count,E) :- aggregate(E,count).",
                        "weight": 0,
                        "witness": "soft(aggregate_count,e1)"
                    }
                ],
                "type_q": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_q",
                        "asp": "soft(type_q,E) :- type(E,quantitative).",
                        "weight": 0,
                        "witness": "soft(type_q,e0)"
                    },
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_q",
                        "asp": "soft(type_q,E) :- type(E,quantitative).",
                        "weight": 0,
                        "witness": "soft(type_q,e1)"
                    }
                ],
                "encoding_field": [
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e0)"
                    }
                ],
                "encoding": [
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e0)"
                    },
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e1)"
                    }
                ],
                "bin": [
                    {
                        "description": "Prefer to not bin.",
                        "type": "soft",
                        "name": "bin",
                        "asp": "soft(bin,E) :- bin(E,_).",
                        "weight": 2,
                        "witness": "soft(bin,e0)"
                    }
                ],
                "aggregate": [
                    {
                        "description": "Prefer to use raw (no aggregate).",
                        "type": "soft",
                        "name": "aggregate",
                        "asp": "soft(aggregate,E) :- aggregate(E,_).",
                        "weight": 1,
                        "witness": "soft(aggregate,e1)"
                    }
                ],
                "continuous_y": [
                    {
                        "description": "Continuous on y channel.",
                        "type": "soft",
                        "name": "continuous_y",
                        "asp": "soft(continuous_y,E) :- channel(E,y), continuous(E).",
                        "weight": 0,
                        "witness": "soft(continuous_y,e1)"
                    }
                ],
                "ordered_x": [
                    {
                        "description": "Ordered on x channel.",
                        "type": "soft",
                        "name": "ordered_x",
                        "asp": "soft(ordered_x,E) :- channel(E,x), discrete(E), not type(E,nominal).",
                        "weight": 1,
                        "witness": "soft(ordered_x,e0)"
                    }
                ],
                "c_d_no_overlap_bar": [
                    {
                        "description": "Continuous by discrete for bar mark with no overlap.",
                        "type": "soft",
                        "name": "c_d_no_overlap_bar",
                        "asp": "soft(c_d_no_overlap_bar) :- is_c_d, no_overlap, mark(bar).",
                        "weight": 0,
                        "witness": "soft(c_d_no_overlap_bar,_placeholder)"
                    }
                ]
            },
            "facts": [
                "data(\"cars.json\")",
                "mark(bar)",
                "zero(e1)",
                "aggregate(e1,count)",
                "bin(e0,10)",
                "channel(e0,x)",
                "channel(e1,y)",
                "field(e0,\"horsepower\")",
                "soft(aggregate_count,e1)",
                "soft(type_q,e0)",
                "soft(type_q,e1)",
                "soft(encoding_field,e0)",
                "soft(encoding,e0)",
                "soft(encoding,e1)",
                "soft(bin,e0)",
                "soft(aggregate,e1)",
                "type(e0,quantitative)",
                "type(e1,quantitative)",
                "soft(continuous_y,e1)",
                "soft(ordered_x,e0)",
                "soft(c_d_no_overlap_bar,_placeholder)"
            ]
        }
    },
    "53": {
        "type": "chart",
        "id": "53",
        "comparator": "<",
        "vlSpec": {
            "mark": "point",
            "encoding": {
                "x": {
                    "bin": true,
                    "field": "horsepower",
                    "type": "quantitative"
                },
                "y": {
                    "aggregate": "count",
                    "type": "quantitative"
                }
            },
            "config": {
                "line": {
                    "point": true
                },
                "scale": {
                    "useUnaggregatedDomain": true
                }
            },
            "data": {
                "url": "cars.json"
            }
        },
        "sol": {
            "violations": {
                "aggregate_count": [
                    {
                        "description": "Count as aggregate op.",
                        "type": "soft",
                        "name": "aggregate_count",
                        "asp": "soft(aggregate_count,E) :- aggregate(E,count).",
                        "weight": 0,
                        "witness": "soft(aggregate_count,e1)"
                    }
                ],
                "type_q": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_q",
                        "asp": "soft(type_q,E) :- type(E,quantitative).",
                        "weight": 0,
                        "witness": "soft(type_q,e0)"
                    },
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_q",
                        "asp": "soft(type_q,E) :- type(E,quantitative).",
                        "weight": 0,
                        "witness": "soft(type_q,e1)"
                    }
                ],
                "encoding_field": [
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e0)"
                    }
                ],
                "encoding": [
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e0)"
                    },
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e1)"
                    }
                ],
                "bin": [
                    {
                        "description": "Prefer to not bin.",
                        "type": "soft",
                        "name": "bin",
                        "asp": "soft(bin,E) :- bin(E,_).",
                        "weight": 2,
                        "witness": "soft(bin,e0)"
                    }
                ],
                "aggregate": [
                    {
                        "description": "Prefer to use raw (no aggregate).",
                        "type": "soft",
                        "name": "aggregate",
                        "asp": "soft(aggregate,E) :- aggregate(E,_).",
                        "weight": 1,
                        "witness": "soft(aggregate,e1)"
                    }
                ],
                "continuous_y": [
                    {
                        "description": "Continuous on y channel.",
                        "type": "soft",
                        "name": "continuous_y",
                        "asp": "soft(continuous_y,E) :- channel(E,y), continuous(E).",
                        "weight": 0,
                        "witness": "soft(continuous_y,e1)"
                    }
                ],
                "ordered_x": [
                    {
                        "description": "Ordered on x channel.",
                        "type": "soft",
                        "name": "ordered_x",
                        "asp": "soft(ordered_x,E) :- channel(E,x), discrete(E), not type(E,nominal).",
                        "weight": 1,
                        "witness": "soft(ordered_x,e0)"
                    }
                ],
                "c_d_no_overlap_point": [
                    {
                        "description": "Continuous by discrete for point mark with no overlap.",
                        "type": "soft",
                        "name": "c_d_no_overlap_point",
                        "asp": "soft(c_d_no_overlap_point) :- is_c_d, no_overlap, mark(point).",
                        "weight": 20,
                        "witness": "soft(c_d_no_overlap_point,_placeholder)"
                    }
                ]
            },
            "facts": [
                "data(\"cars.json\")",
                "mark(point)",
                "zero(e1)",
                "aggregate(e1,count)",
                "bin(e0,10)",
                "channel(e0,x)",
                "channel(e1,y)",
                "field(e0,\"horsepower\")",
                "soft(aggregate_count,e1)",
                "soft(type_q,e0)",
                "soft(type_q,e1)",
                "soft(encoding_field,e0)",
                "soft(encoding,e0)",
                "soft(encoding,e1)",
                "soft(bin,e0)",
                "soft(aggregate,e1)",
                "type(e0,quantitative)",
                "type(e1,quantitative)",
                "soft(continuous_y,e1)",
                "soft(ordered_x,e0)",
                "soft(c_d_no_overlap_point,_placeholder)"
            ]
        }
    },
    "55": {
        "type": "chart",
        "id": "55",
        "comparator": "<",
        "vlSpec": {
            "mark": "tick",
            "encoding": {
                "x": {
                    "bin": true,
                    "field": "horsepower",
                    "type": "quantitative"
                },
                "y": {
                    "aggregate": "count",
                    "type": "quantitative"
                }
            },
            "config": {
                "line": {
                    "point": true
                },
                "scale": {
                    "useUnaggregatedDomain": true
                }
            },
            "data": {
                "url": "cars.json"
            }
        },
        "sol": {
            "violations": {
                "aggregate_count": [
                    {
                        "description": "Count as aggregate op.",
                        "type": "soft",
                        "name": "aggregate_count",
                        "asp": "soft(aggregate_count,E) :- aggregate(E,count).",
                        "weight": 0,
                        "witness": "soft(aggregate_count,e1)"
                    }
                ],
                "type_q": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_q",
                        "asp": "soft(type_q,E) :- type(E,quantitative).",
                        "weight": 0,
                        "witness": "soft(type_q,e0)"
                    },
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_q",
                        "asp": "soft(type_q,E) :- type(E,quantitative).",
                        "weight": 0,
                        "witness": "soft(type_q,e1)"
                    }
                ],
                "encoding_field": [
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e0)"
                    }
                ],
                "encoding": [
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e0)"
                    },
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e1)"
                    }
                ],
                "bin": [
                    {
                        "description": "Prefer to not bin.",
                        "type": "soft",
                        "name": "bin",
                        "asp": "soft(bin,E) :- bin(E,_).",
                        "weight": 2,
                        "witness": "soft(bin,e0)"
                    }
                ],
                "aggregate": [
                    {
                        "description": "Prefer to use raw (no aggregate).",
                        "type": "soft",
                        "name": "aggregate",
                        "asp": "soft(aggregate,E) :- aggregate(E,_).",
                        "weight": 1,
                        "witness": "soft(aggregate,e1)"
                    }
                ],
                "continuous_y": [
                    {
                        "description": "Continuous on y channel.",
                        "type": "soft",
                        "name": "continuous_y",
                        "asp": "soft(continuous_y,E) :- channel(E,y), continuous(E).",
                        "weight": 0,
                        "witness": "soft(continuous_y,e1)"
                    }
                ],
                "ordered_x": [
                    {
                        "description": "Ordered on x channel.",
                        "type": "soft",
                        "name": "ordered_x",
                        "asp": "soft(ordered_x,E) :- channel(E,x), discrete(E), not type(E,nominal).",
                        "weight": 1,
                        "witness": "soft(ordered_x,e0)"
                    }
                ],
                "c_d_no_overlap_tick": [
                    {
                        "description": "Continuous by discrete for tick mark with no overlap.",
                        "type": "soft",
                        "name": "c_d_no_overlap_tick",
                        "asp": "soft(c_d_no_overlap_tick) :- is_c_d, no_overlap, mark(tick).",
                        "weight": 25,
                        "witness": "soft(c_d_no_overlap_tick,_placeholder)"
                    }
                ]
            },
            "facts": [
                "data(\"cars.json\")",
                "mark(tick)",
                "zero(e1)",
                "aggregate(e1,count)",
                "bin(e0,10)",
                "channel(e0,x)",
                "channel(e1,y)",
                "field(e0,\"horsepower\")",
                "soft(aggregate_count,e1)",
                "soft(type_q,e0)",
                "soft(type_q,e1)",
                "soft(encoding_field,e0)",
                "soft(encoding,e0)",
                "soft(encoding,e1)",
                "soft(bin,e0)",
                "soft(aggregate,e1)",
                "type(e0,quantitative)",
                "type(e1,quantitative)",
                "soft(continuous_y,e1)",
                "soft(ordered_x,e0)",
                "soft(c_d_no_overlap_tick,_placeholder)"
            ]
        }
    },
    "57": {
        "type": "chart",
        "id": "57",
        "comparator": "<",
        "vlSpec": {
            "mark": "line",
            "encoding": {
                "x": {
                    "bin": true,
                    "field": "horsepower",
                    "type": "quantitative"
                },
                "y": {
                    "aggregate": "count",
                    "type": "quantitative"
                }
            },
            "config": {
                "line": {
                    "point": true
                },
                "scale": {
                    "useUnaggregatedDomain": true
                }
            },
            "data": {
                "url": "cars.json"
            }
        },
        "sol": {
            "violations": {
                "aggregate_count": [
                    {
                        "description": "Count as aggregate op.",
                        "type": "soft",
                        "name": "aggregate_count",
                        "asp": "soft(aggregate_count,E) :- aggregate(E,count).",
                        "weight": 0,
                        "witness": "soft(aggregate_count,e1)"
                    }
                ],
                "type_q": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_q",
                        "asp": "soft(type_q,E) :- type(E,quantitative).",
                        "weight": 0,
                        "witness": "soft(type_q,e0)"
                    },
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_q",
                        "asp": "soft(type_q,E) :- type(E,quantitative).",
                        "weight": 0,
                        "witness": "soft(type_q,e1)"
                    }
                ],
                "encoding_field": [
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e0)"
                    }
                ],
                "encoding": [
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e0)"
                    },
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e1)"
                    }
                ],
                "bin": [
                    {
                        "description": "Prefer to not bin.",
                        "type": "soft",
                        "name": "bin",
                        "asp": "soft(bin,E) :- bin(E,_).",
                        "weight": 2,
                        "witness": "soft(bin,e0)"
                    }
                ],
                "aggregate": [
                    {
                        "description": "Prefer to use raw (no aggregate).",
                        "type": "soft",
                        "name": "aggregate",
                        "asp": "soft(aggregate,E) :- aggregate(E,_).",
                        "weight": 1,
                        "witness": "soft(aggregate,e1)"
                    }
                ],
                "continuous_y": [
                    {
                        "description": "Continuous on y channel.",
                        "type": "soft",
                        "name": "continuous_y",
                        "asp": "soft(continuous_y,E) :- channel(E,y), continuous(E).",
                        "weight": 0,
                        "witness": "soft(continuous_y,e1)"
                    }
                ],
                "ordered_x": [
                    {
                        "description": "Ordered on x channel.",
                        "type": "soft",
                        "name": "ordered_x",
                        "asp": "soft(ordered_x,E) :- channel(E,x), discrete(E), not type(E,nominal).",
                        "weight": 1,
                        "witness": "soft(ordered_x,e0)"
                    }
                ],
                "c_d_no_overlap_line": [
                    {
                        "description": "Continuous by discrete for line mark with no overlap.",
                        "type": "soft",
                        "name": "c_d_no_overlap_line",
                        "asp": "soft(c_d_no_overlap_line) :- is_c_d, no_overlap, mark(line).",
                        "weight": 20,
                        "witness": "soft(c_d_no_overlap_line,_placeholder)"
                    }
                ]
            },
            "facts": [
                "data(\"cars.json\")",
                "mark(line)",
                "zero(e1)",
                "aggregate(e1,count)",
                "bin(e0,10)",
                "channel(e0,x)",
                "channel(e1,y)",
                "field(e0,\"horsepower\")",
                "soft(aggregate_count,e1)",
                "soft(type_q,e0)",
                "soft(type_q,e1)",
                "soft(encoding_field,e0)",
                "soft(encoding,e0)",
                "soft(encoding,e1)",
                "soft(bin,e0)",
                "soft(aggregate,e1)",
                "type(e0,quantitative)",
                "type(e1,quantitative)",
                "soft(continuous_y,e1)",
                "soft(ordered_x,e0)",
                "soft(c_d_no_overlap_line,_placeholder)"
            ]
        }
    },
    "59": {
        "type": "chart",
        "id": "59",
        "comparator": "<",
        "vlSpec": {
            "mark": "area",
            "encoding": {
                "x": {
                    "bin": true,
                    "field": "horsepower",
                    "type": "quantitative"
                },
                "y": {
                    "aggregate": "count",
                    "type": "quantitative"
                }
            },
            "config": {
                "line": {
                    "point": true
                },
                "scale": {
                    "useUnaggregatedDomain": true
                }
            },
            "data": {
                "url": "cars.json"
            }
        },
        "sol": {
            "violations": {
                "aggregate_count": [
                    {
                        "description": "Count as aggregate op.",
                        "type": "soft",
                        "name": "aggregate_count",
                        "asp": "soft(aggregate_count,E) :- aggregate(E,count).",
                        "weight": 0,
                        "witness": "soft(aggregate_count,e1)"
                    }
                ],
                "type_q": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_q",
                        "asp": "soft(type_q,E) :- type(E,quantitative).",
                        "weight": 0,
                        "witness": "soft(type_q,e0)"
                    },
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_q",
                        "asp": "soft(type_q,E) :- type(E,quantitative).",
                        "weight": 0,
                        "witness": "soft(type_q,e1)"
                    }
                ],
                "encoding_field": [
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e0)"
                    }
                ],
                "encoding": [
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e0)"
                    },
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e1)"
                    }
                ],
                "bin": [
                    {
                        "description": "Prefer to not bin.",
                        "type": "soft",
                        "name": "bin",
                        "asp": "soft(bin,E) :- bin(E,_).",
                        "weight": 2,
                        "witness": "soft(bin,e0)"
                    }
                ],
                "aggregate": [
                    {
                        "description": "Prefer to use raw (no aggregate).",
                        "type": "soft",
                        "name": "aggregate",
                        "asp": "soft(aggregate,E) :- aggregate(E,_).",
                        "weight": 1,
                        "witness": "soft(aggregate,e1)"
                    }
                ],
                "continuous_y": [
                    {
                        "description": "Continuous on y channel.",
                        "type": "soft",
                        "name": "continuous_y",
                        "asp": "soft(continuous_y,E) :- channel(E,y), continuous(E).",
                        "weight": 0,
                        "witness": "soft(continuous_y,e1)"
                    }
                ],
                "ordered_x": [
                    {
                        "description": "Ordered on x channel.",
                        "type": "soft",
                        "name": "ordered_x",
                        "asp": "soft(ordered_x,E) :- channel(E,x), discrete(E), not type(E,nominal).",
                        "weight": 1,
                        "witness": "soft(ordered_x,e0)"
                    }
                ],
                "c_d_no_overlap_area": [
                    {
                        "description": "Continuous by discrete for area mark with no overlap.",
                        "type": "soft",
                        "name": "c_d_no_overlap_area",
                        "asp": "soft(c_d_no_overlap_area) :- is_c_d, no_overlap, mark(area).",
                        "weight": 20,
                        "witness": "soft(c_d_no_overlap_area,_placeholder)"
                    }
                ]
            },
            "facts": [
                "data(\"cars.json\")",
                "mark(area)",
                "zero(e1)",
                "aggregate(e1,count)",
                "bin(e0,10)",
                "channel(e0,x)",
                "channel(e1,y)",
                "field(e0,\"horsepower\")",
                "soft(aggregate_count,e1)",
                "soft(type_q,e0)",
                "soft(type_q,e1)",
                "soft(encoding_field,e0)",
                "soft(encoding,e0)",
                "soft(encoding,e1)",
                "soft(bin,e0)",
                "soft(aggregate,e1)",
                "type(e0,quantitative)",
                "type(e1,quantitative)",
                "soft(continuous_y,e1)",
                "soft(ordered_x,e0)",
                "soft(c_d_no_overlap_area,_placeholder)"
            ]
        }
    },
    "61": {
        "type": "chart",
        "id": "61",
        "comparator": "<",
        "vlSpec": {
            "mark": "rule",
            "encoding": {
                "x": {
                    "bin": true,
                    "field": "horsepower",
                    "type": "quantitative"
                },
                "y": {
                    "aggregate": "count",
                    "type": "quantitative"
                }
            },
            "config": {
                "line": {
                    "point": true
                },
                "scale": {
                    "useUnaggregatedDomain": true
                }
            },
            "data": {
                "url": "cars.json"
            }
        },
        "sol": "unsat"
    },
    "64": {
        "type": "chart",
        "id": "64",
        "comparator": "<",
        "vlSpec": {
            "mark": "tick",
            "encoding": {
                "x": {
                    "field": "year",
                    "type": "temporal"
                }
            },
            "config": {
                "line": {
                    "point": true
                },
                "scale": {
                    "useUnaggregatedDomain": true
                }
            },
            "data": {
                "url": "cars.json"
            }
        },
        "sol": {
            "violations": {
                "encoding_field": [
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e0)"
                    }
                ],
                "encoding": [
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e0)"
                    }
                ],
                "continuous_x": [
                    {
                        "description": "Continuous on x channel.",
                        "type": "soft",
                        "name": "continuous_x",
                        "asp": "soft(continuous_x,E) :- channel(E,x), continuous(E).",
                        "weight": 0,
                        "witness": "soft(continuous_x,e0)"
                    }
                ],
                "zero": [
                    {
                        "description": "Prefer to include zero for continuous (binned doesn't need zero).",
                        "type": "soft",
                        "name": "zero",
                        "asp": "soft(zero,E) :- continuous(E), not zero(E).",
                        "weight": 1,
                        "witness": "soft(zero,e0)"
                    }
                ],
                "zero_positional": [
                    {
                        "description": "Prefer zero positional.",
                        "type": "soft",
                        "name": "zero_positional",
                        "asp": "soft(zero_positional) :- continuous(E), channel(E,(x;y)), not zero(E).",
                        "weight": 1,
                        "witness": "soft(zero_positional,_placeholder)"
                    }
                ],
                "c_d_tick": [
                    {
                        "description": "Continuous by discrete for tick mark.",
                        "type": "soft",
                        "name": "c_d_tick",
                        "asp": "soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).",
                        "weight": 0,
                        "witness": "soft(c_d_tick,_placeholder)"
                    }
                ]
            },
            "facts": [
                "data(\"cars.json\")",
                "mark(tick)",
                "channel(e0,x)",
                "field(e0,\"year\")",
                "soft(encoding_field,e0)",
                "soft(encoding,e0)",
                "type(e0,temporal)",
                "soft(continuous_x,e0)",
                "soft(zero,e0)",
                "soft(zero_positional,_placeholder)",
                "soft(c_d_tick,_placeholder)"
            ]
        }
    },
    "65": {
        "type": "chart",
        "id": "65",
        "comparator": "<",
        "vlSpec": {
            "mark": "point",
            "encoding": {
                "x": {
                    "field": "year",
                    "type": "temporal"
                }
            },
            "config": {
                "line": {
                    "point": true
                },
                "scale": {
                    "useUnaggregatedDomain": true
                }
            },
            "data": {
                "url": "cars.json"
            }
        },
        "sol": {
            "violations": {
                "encoding_field": [
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e0)"
                    }
                ],
                "encoding": [
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e0)"
                    }
                ],
                "continuous_x": [
                    {
                        "description": "Continuous on x channel.",
                        "type": "soft",
                        "name": "continuous_x",
                        "asp": "soft(continuous_x,E) :- channel(E,x), continuous(E).",
                        "weight": 0,
                        "witness": "soft(continuous_x,e0)"
                    }
                ],
                "zero": [
                    {
                        "description": "Prefer to include zero for continuous (binned doesn't need zero).",
                        "type": "soft",
                        "name": "zero",
                        "asp": "soft(zero,E) :- continuous(E), not zero(E).",
                        "weight": 1,
                        "witness": "soft(zero,e0)"
                    }
                ],
                "zero_positional": [
                    {
                        "description": "Prefer zero positional.",
                        "type": "soft",
                        "name": "zero_positional",
                        "asp": "soft(zero_positional) :- continuous(E), channel(E,(x;y)), not zero(E).",
                        "weight": 1,
                        "witness": "soft(zero_positional,_placeholder)"
                    }
                ],
                "c_d_point": [
                    {
                        "description": "Continuous by discrete for point mark.",
                        "type": "soft",
                        "name": "c_d_point",
                        "asp": "soft(c_d_point) :- is_c_d, not no_overlap, mark(point).",
                        "weight": 10,
                        "witness": "soft(c_d_point,_placeholder)"
                    }
                ]
            },
            "facts": [
                "data(\"cars.json\")",
                "mark(point)",
                "channel(e0,x)",
                "field(e0,\"year\")",
                "soft(encoding_field,e0)",
                "soft(encoding,e0)",
                "type(e0,temporal)",
                "soft(continuous_x,e0)",
                "soft(zero,e0)",
                "soft(zero_positional,_placeholder)",
                "soft(c_d_point,_placeholder)"
            ]
        }
    },
    "67": {
        "type": "chart",
        "id": "67",
        "comparator": "<",
        "vlSpec": {
            "mark": "line",
            "encoding": {
                "x": {
                    "field": "year",
                    "type": "temporal"
                }
            },
            "config": {
                "line": {
                    "point": true
                },
                "scale": {
                    "useUnaggregatedDomain": true
                }
            },
            "data": {
                "url": "cars.json"
            }
        },
        "sol": {
            "violations": {
                "encoding_field": [
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e0)"
                    }
                ],
                "encoding": [
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e0)"
                    }
                ],
                "continuous_x": [
                    {
                        "description": "Continuous on x channel.",
                        "type": "soft",
                        "name": "continuous_x",
                        "asp": "soft(continuous_x,E) :- channel(E,x), continuous(E).",
                        "weight": 0,
                        "witness": "soft(continuous_x,e0)"
                    }
                ],
                "zero": [
                    {
                        "description": "Prefer to include zero for continuous (binned doesn't need zero).",
                        "type": "soft",
                        "name": "zero",
                        "asp": "soft(zero,E) :- continuous(E), not zero(E).",
                        "weight": 1,
                        "witness": "soft(zero,e0)"
                    }
                ],
                "zero_positional": [
                    {
                        "description": "Prefer zero positional.",
                        "type": "soft",
                        "name": "zero_positional",
                        "asp": "soft(zero_positional) :- continuous(E), channel(E,(x;y)), not zero(E).",
                        "weight": 1,
                        "witness": "soft(zero_positional,_placeholder)"
                    }
                ],
                "c_d_line": [
                    {
                        "description": "Continuous by discrete for line mark.",
                        "type": "soft",
                        "name": "c_d_line",
                        "asp": "soft(c_d_line) :- is_c_d, not no_overlap, mark(line).",
                        "weight": 20,
                        "witness": "soft(c_d_line,_placeholder)"
                    }
                ]
            },
            "facts": [
                "data(\"cars.json\")",
                "mark(line)",
                "channel(e0,x)",
                "field(e0,\"year\")",
                "soft(encoding_field,e0)",
                "soft(encoding,e0)",
                "type(e0,temporal)",
                "soft(continuous_x,e0)",
                "soft(zero,e0)",
                "soft(zero_positional,_placeholder)",
                "soft(c_d_line,_placeholder)"
            ]
        }
    },
    "69": {
        "type": "chart",
        "id": "69",
        "comparator": "<",
        "vlSpec": {
            "mark": "bar",
            "encoding": {
                "x": {
                    "field": "year",
                    "type": "temporal"
                }
            },
            "config": {
                "line": {
                    "point": true
                },
                "scale": {
                    "useUnaggregatedDomain": true
                }
            },
            "data": {
                "url": "cars.json"
            }
        },
        "sol": {
            "violations": {
                "encoding_field": [
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e0)"
                    }
                ],
                "encoding": [
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e0)"
                    }
                ],
                "continuous_x": [
                    {
                        "description": "Continuous on x channel.",
                        "type": "soft",
                        "name": "continuous_x",
                        "asp": "soft(continuous_x,E) :- channel(E,x), continuous(E).",
                        "weight": 0,
                        "witness": "soft(continuous_x,e0)"
                    }
                ],
                "zero": [
                    {
                        "description": "Prefer to include zero for continuous (binned doesn't need zero).",
                        "type": "soft",
                        "name": "zero",
                        "asp": "soft(zero,E) :- continuous(E), not zero(E).",
                        "weight": 1,
                        "witness": "soft(zero,e0)"
                    }
                ],
                "zero_positional": [
                    {
                        "description": "Prefer zero positional.",
                        "type": "soft",
                        "name": "zero_positional",
                        "asp": "soft(zero_positional) :- continuous(E), channel(E,(x;y)), not zero(E).",
                        "weight": 1,
                        "witness": "soft(zero_positional,_placeholder)"
                    }
                ],
                "c_d_bar": [
                    {
                        "description": "Continuous by discrete for bar mark.",
                        "type": "soft",
                        "name": "c_d_bar",
                        "asp": "soft(c_d_bar) :- is_c_d, not no_overlap, mark(bar).",
                        "weight": 20,
                        "witness": "soft(c_d_bar,_placeholder)"
                    }
                ]
            },
            "facts": [
                "data(\"cars.json\")",
                "mark(bar)",
                "channel(e0,x)",
                "field(e0,\"year\")",
                "soft(encoding_field,e0)",
                "soft(encoding,e0)",
                "type(e0,temporal)",
                "soft(continuous_x,e0)",
                "soft(zero,e0)",
                "soft(zero_positional,_placeholder)",
                "soft(c_d_bar,_placeholder)"
            ]
        }
    },
    "71": {
        "type": "chart",
        "id": "71",
        "comparator": "<",
        "vlSpec": {
            "mark": "area",
            "encoding": {
                "x": {
                    "field": "year",
                    "type": "temporal"
                }
            },
            "config": {
                "line": {
                    "point": true
                },
                "scale": {
                    "useUnaggregatedDomain": true
                }
            },
            "data": {
                "url": "cars.json"
            }
        },
        "sol": {
            "violations": {
                "encoding_field": [
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e0)"
                    }
                ],
                "encoding": [
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e0)"
                    }
                ],
                "continuous_x": [
                    {
                        "description": "Continuous on x channel.",
                        "type": "soft",
                        "name": "continuous_x",
                        "asp": "soft(continuous_x,E) :- channel(E,x), continuous(E).",
                        "weight": 0,
                        "witness": "soft(continuous_x,e0)"
                    }
                ],
                "zero": [
                    {
                        "description": "Prefer to include zero for continuous (binned doesn't need zero).",
                        "type": "soft",
                        "name": "zero",
                        "asp": "soft(zero,E) :- continuous(E), not zero(E).",
                        "weight": 1,
                        "witness": "soft(zero,e0)"
                    }
                ],
                "zero_positional": [
                    {
                        "description": "Prefer zero positional.",
                        "type": "soft",
                        "name": "zero_positional",
                        "asp": "soft(zero_positional) :- continuous(E), channel(E,(x;y)), not zero(E).",
                        "weight": 1,
                        "witness": "soft(zero_positional,_placeholder)"
                    }
                ],
                "c_d_area": [
                    {
                        "description": "Continuous by discrete for area mark.",
                        "type": "soft",
                        "name": "c_d_area",
                        "asp": "soft(c_d_area) :- is_c_d, not no_overlap, mark(area).",
                        "weight": 20,
                        "witness": "soft(c_d_area,_placeholder)"
                    }
                ]
            },
            "facts": [
                "data(\"cars.json\")",
                "mark(area)",
                "channel(e0,x)",
                "field(e0,\"year\")",
                "soft(encoding_field,e0)",
                "soft(encoding,e0)",
                "type(e0,temporal)",
                "soft(continuous_x,e0)",
                "soft(zero,e0)",
                "soft(zero_positional,_placeholder)",
                "soft(c_d_area,_placeholder)"
            ]
        }
    },
    "73": {
        "type": "chart",
        "id": "73",
        "comparator": "<",
        "vlSpec": {
            "mark": "rule",
            "encoding": {
                "x": {
                    "field": "year",
                    "type": "temporal"
                }
            },
            "config": {
                "line": {
                    "point": true
                },
                "scale": {
                    "useUnaggregatedDomain": true
                }
            },
            "data": {
                "url": "cars.json"
            }
        },
        "sol": "unsat"
    },
    "78": {
        "type": "chart",
        "id": "78",
        "comparator": "<",
        "vlSpec": {
            "mark": "line",
            "encoding": {
                "x": {
                    "timeUnit": "month",
                    "field": "year",
                    "type": "temporal"
                },
                "y": {
                    "aggregate": "count",
                    "type": "quantitative"
                }
            },
            "config": {
                "line": {
                    "point": true
                },
                "scale": {
                    "useUnaggregatedDomain": true
                }
            },
            "data": {
                "url": "cars.json"
            }
        },
        "sol": {
            "violations": {
                "aggregate_count": [
                    {
                        "description": "Count as aggregate op.",
                        "type": "soft",
                        "name": "aggregate_count",
                        "asp": "soft(aggregate_count,E) :- aggregate(E,count).",
                        "weight": 0,
                        "witness": "soft(aggregate_count,e1)"
                    }
                ],
                "type_q": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_q",
                        "asp": "soft(type_q,E) :- type(E,quantitative).",
                        "weight": 0,
                        "witness": "soft(type_q,e1)"
                    }
                ],
                "encoding_field": [
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e0)"
                    }
                ],
                "encoding": [
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e0)"
                    },
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e1)"
                    }
                ],
                "aggregate": [
                    {
                        "description": "Prefer to use raw (no aggregate).",
                        "type": "soft",
                        "name": "aggregate",
                        "asp": "soft(aggregate,E) :- aggregate(E,_).",
                        "weight": 1,
                        "witness": "soft(aggregate,e1)"
                    }
                ],
                "continuous_y": [
                    {
                        "description": "Continuous on y channel.",
                        "type": "soft",
                        "name": "continuous_y",
                        "asp": "soft(continuous_y,E) :- channel(E,y), continuous(E).",
                        "weight": 0,
                        "witness": "soft(continuous_y,e1)"
                    }
                ],
                "continuous_x": [
                    {
                        "description": "Continuous on x channel.",
                        "type": "soft",
                        "name": "continuous_x",
                        "asp": "soft(continuous_x,E) :- channel(E,x), continuous(E).",
                        "weight": 0,
                        "witness": "soft(continuous_x,e0)"
                    }
                ],
                "c_c_line": [
                    {
                        "description": "Continuous by continuous for line mark.",
                        "type": "soft",
                        "name": "c_c_line",
                        "asp": "soft(c_c_line) :- is_c_c, mark(line).",
                        "weight": 20,
                        "witness": "soft(c_c_line,_placeholder)"
                    }
                ],
                "agg_dim": [
                    {
                        "description": "Aggregate should also have a discrete encoding to group by.",
                        "type": "soft",
                        "name": "agg_dim",
                        "asp": "soft(agg_dim) :- aggregate(_,_), not discrete(_).",
                        "weight": 2,
                        "witness": "soft(agg_dim,_placeholder)"
                    }
                ],
                "zero": [
                    {
                        "description": "Prefer to include zero for continuous (binned doesn't need zero).",
                        "type": "soft",
                        "name": "zero",
                        "asp": "soft(zero,E) :- continuous(E), not zero(E).",
                        "weight": 1,
                        "witness": "soft(zero,e0)"
                    }
                ],
                "aggregate_group_by_raw": [
                    {
                        "description": "Aggregate plots should not use raw continuous as group by.",
                        "type": "soft",
                        "name": "aggregate_group_by_raw",
                        "asp": "soft(aggregate_group_by_raw,E) :- aggregate(_,_), continuous(E), not aggregate(E,_).",
                        "weight": 3,
                        "witness": "soft(aggregate_group_by_raw,e0)"
                    }
                ],
                "zero_positional": [
                    {
                        "description": "Prefer zero positional.",
                        "type": "soft",
                        "name": "zero_positional",
                        "asp": "soft(zero_positional) :- continuous(E), channel(E,(x;y)), not zero(E).",
                        "weight": 1,
                        "witness": "soft(zero_positional,_placeholder)"
                    }
                ]
            },
            "facts": [
                "data(\"cars.json\")",
                "mark(line)",
                "zero(e1)",
                "aggregate(e1,count)",
                "channel(e0,x)",
                "channel(e1,y)",
                "field(e0,\"year\")",
                "soft(aggregate_count,e1)",
                "soft(type_q,e1)",
                "soft(encoding_field,e0)",
                "soft(encoding,e0)",
                "soft(encoding,e1)",
                "soft(aggregate,e1)",
                "type(e0,temporal)",
                "type(e1,quantitative)",
                "soft(continuous_y,e1)",
                "soft(continuous_x,e0)",
                "soft(c_c_line,_placeholder)",
                "soft(agg_dim,_placeholder)",
                "soft(zero,e0)",
                "soft(aggregate_group_by_raw,e0)",
                "soft(zero_positional,_placeholder)"
            ]
        }
    },
    "79": {
        "type": "chart",
        "id": "79",
        "comparator": "<",
        "vlSpec": {
            "mark": "area",
            "encoding": {
                "x": {
                    "timeUnit": "month",
                    "field": "year",
                    "type": "temporal"
                },
                "y": {
                    "aggregate": "count",
                    "type": "quantitative"
                }
            },
            "config": {
                "line": {
                    "point": true
                },
                "scale": {
                    "useUnaggregatedDomain": true
                }
            },
            "data": {
                "url": "cars.json"
            }
        },
        "sol": {
            "violations": {
                "aggregate_count": [
                    {
                        "description": "Count as aggregate op.",
                        "type": "soft",
                        "name": "aggregate_count",
                        "asp": "soft(aggregate_count,E) :- aggregate(E,count).",
                        "weight": 0,
                        "witness": "soft(aggregate_count,e1)"
                    }
                ],
                "type_q": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_q",
                        "asp": "soft(type_q,E) :- type(E,quantitative).",
                        "weight": 0,
                        "witness": "soft(type_q,e1)"
                    }
                ],
                "encoding_field": [
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e0)"
                    }
                ],
                "encoding": [
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e0)"
                    },
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e1)"
                    }
                ],
                "aggregate": [
                    {
                        "description": "Prefer to use raw (no aggregate).",
                        "type": "soft",
                        "name": "aggregate",
                        "asp": "soft(aggregate,E) :- aggregate(E,_).",
                        "weight": 1,
                        "witness": "soft(aggregate,e1)"
                    }
                ],
                "continuous_y": [
                    {
                        "description": "Continuous on y channel.",
                        "type": "soft",
                        "name": "continuous_y",
                        "asp": "soft(continuous_y,E) :- channel(E,y), continuous(E).",
                        "weight": 0,
                        "witness": "soft(continuous_y,e1)"
                    }
                ],
                "continuous_x": [
                    {
                        "description": "Continuous on x channel.",
                        "type": "soft",
                        "name": "continuous_x",
                        "asp": "soft(continuous_x,E) :- channel(E,x), continuous(E).",
                        "weight": 0,
                        "witness": "soft(continuous_x,e0)"
                    }
                ],
                "c_c_area": [
                    {
                        "description": "Continuous by continuous for area mark.",
                        "type": "soft",
                        "name": "c_c_area",
                        "asp": "soft(c_c_area) :- is_c_c, mark(area).",
                        "weight": 20,
                        "witness": "soft(c_c_area,_placeholder)"
                    }
                ],
                "agg_dim": [
                    {
                        "description": "Aggregate should also have a discrete encoding to group by.",
                        "type": "soft",
                        "name": "agg_dim",
                        "asp": "soft(agg_dim) :- aggregate(_,_), not discrete(_).",
                        "weight": 2,
                        "witness": "soft(agg_dim,_placeholder)"
                    }
                ],
                "zero": [
                    {
                        "description": "Prefer to include zero for continuous (binned doesn't need zero).",
                        "type": "soft",
                        "name": "zero",
                        "asp": "soft(zero,E) :- continuous(E), not zero(E).",
                        "weight": 1,
                        "witness": "soft(zero,e0)"
                    }
                ],
                "aggregate_group_by_raw": [
                    {
                        "description": "Aggregate plots should not use raw continuous as group by.",
                        "type": "soft",
                        "name": "aggregate_group_by_raw",
                        "asp": "soft(aggregate_group_by_raw,E) :- aggregate(_,_), continuous(E), not aggregate(E,_).",
                        "weight": 3,
                        "witness": "soft(aggregate_group_by_raw,e0)"
                    }
                ],
                "zero_positional": [
                    {
                        "description": "Prefer zero positional.",
                        "type": "soft",
                        "name": "zero_positional",
                        "asp": "soft(zero_positional) :- continuous(E), channel(E,(x;y)), not zero(E).",
                        "weight": 1,
                        "witness": "soft(zero_positional,_placeholder)"
                    }
                ]
            },
            "facts": [
                "data(\"cars.json\")",
                "mark(area)",
                "zero(e1)",
                "aggregate(e1,count)",
                "channel(e0,x)",
                "channel(e1,y)",
                "field(e0,\"year\")",
                "soft(aggregate_count,e1)",
                "soft(type_q,e1)",
                "soft(encoding_field,e0)",
                "soft(encoding,e0)",
                "soft(encoding,e1)",
                "soft(aggregate,e1)",
                "type(e0,temporal)",
                "type(e1,quantitative)",
                "soft(continuous_y,e1)",
                "soft(continuous_x,e0)",
                "soft(c_c_area,_placeholder)",
                "soft(agg_dim,_placeholder)",
                "soft(zero,e0)",
                "soft(aggregate_group_by_raw,e0)",
                "soft(zero_positional,_placeholder)"
            ]
        }
    },
    "81": {
        "type": "chart",
        "id": "81",
        "comparator": "<",
        "vlSpec": {
            "mark": "bar",
            "encoding": {
                "x": {
                    "timeUnit": "month",
                    "field": "year",
                    "type": "temporal"
                },
                "y": {
                    "aggregate": "count",
                    "type": "quantitative"
                }
            },
            "config": {
                "line": {
                    "point": true
                },
                "scale": {
                    "useUnaggregatedDomain": true
                }
            },
            "data": {
                "url": "cars.json"
            }
        },
        "sol": {
            "violations": {
                "aggregate_count": [
                    {
                        "description": "Count as aggregate op.",
                        "type": "soft",
                        "name": "aggregate_count",
                        "asp": "soft(aggregate_count,E) :- aggregate(E,count).",
                        "weight": 0,
                        "witness": "soft(aggregate_count,e1)"
                    }
                ],
                "type_q": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_q",
                        "asp": "soft(type_q,E) :- type(E,quantitative).",
                        "weight": 0,
                        "witness": "soft(type_q,e1)"
                    }
                ],
                "encoding_field": [
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e0)"
                    }
                ],
                "encoding": [
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e0)"
                    },
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e1)"
                    }
                ],
                "aggregate": [
                    {
                        "description": "Prefer to use raw (no aggregate).",
                        "type": "soft",
                        "name": "aggregate",
                        "asp": "soft(aggregate,E) :- aggregate(E,_).",
                        "weight": 1,
                        "witness": "soft(aggregate,e1)"
                    }
                ],
                "continuous_y": [
                    {
                        "description": "Continuous on y channel.",
                        "type": "soft",
                        "name": "continuous_y",
                        "asp": "soft(continuous_y,E) :- channel(E,y), continuous(E).",
                        "weight": 0,
                        "witness": "soft(continuous_y,e1)"
                    }
                ],
                "continuous_x": [
                    {
                        "description": "Continuous on x channel.",
                        "type": "soft",
                        "name": "continuous_x",
                        "asp": "soft(continuous_x,E) :- channel(E,x), continuous(E).",
                        "weight": 0,
                        "witness": "soft(continuous_x,e0)"
                    }
                ],
                "agg_dim": [
                    {
                        "description": "Aggregate should also have a discrete encoding to group by.",
                        "type": "soft",
                        "name": "agg_dim",
                        "asp": "soft(agg_dim) :- aggregate(_,_), not discrete(_).",
                        "weight": 2,
                        "witness": "soft(agg_dim,_placeholder)"
                    }
                ],
                "zero": [
                    {
                        "description": "Prefer to include zero for continuous (binned doesn't need zero).",
                        "type": "soft",
                        "name": "zero",
                        "asp": "soft(zero,E) :- continuous(E), not zero(E).",
                        "weight": 1,
                        "witness": "soft(zero,e0)"
                    }
                ],
                "aggregate_group_by_raw": [
                    {
                        "description": "Aggregate plots should not use raw continuous as group by.",
                        "type": "soft",
                        "name": "aggregate_group_by_raw",
                        "asp": "soft(aggregate_group_by_raw,E) :- aggregate(_,_), continuous(E), not aggregate(E,_).",
                        "weight": 3,
                        "witness": "soft(aggregate_group_by_raw,e0)"
                    }
                ],
                "zero_positional": [
                    {
                        "description": "Prefer zero positional.",
                        "type": "soft",
                        "name": "zero_positional",
                        "asp": "soft(zero_positional) :- continuous(E), channel(E,(x;y)), not zero(E).",
                        "weight": 1,
                        "witness": "soft(zero_positional,_placeholder)"
                    }
                ]
            },
            "facts": [
                "data(\"cars.json\")",
                "mark(bar)",
                "zero(e1)",
                "aggregate(e1,count)",
                "channel(e0,x)",
                "channel(e1,y)",
                "field(e0,\"year\")",
                "soft(aggregate_count,e1)",
                "soft(type_q,e1)",
                "soft(encoding_field,e0)",
                "soft(encoding,e0)",
                "soft(encoding,e1)",
                "soft(aggregate,e1)",
                "type(e0,temporal)",
                "type(e1,quantitative)",
                "soft(continuous_y,e1)",
                "soft(continuous_x,e0)",
                "soft(agg_dim,_placeholder)",
                "soft(zero,e0)",
                "soft(aggregate_group_by_raw,e0)",
                "soft(zero_positional,_placeholder)"
            ]
        }
    },
    "83": {
        "type": "chart",
        "id": "83",
        "comparator": "<",
        "vlSpec": {
            "mark": "point",
            "encoding": {
                "x": {
                    "timeUnit": "month",
                    "field": "year",
                    "type": "temporal"
                },
                "y": {
                    "aggregate": "count",
                    "type": "quantitative"
                }
            },
            "config": {
                "line": {
                    "point": true
                },
                "scale": {
                    "useUnaggregatedDomain": true
                }
            },
            "data": {
                "url": "cars.json"
            }
        },
        "sol": {
            "violations": {
                "aggregate_count": [
                    {
                        "description": "Count as aggregate op.",
                        "type": "soft",
                        "name": "aggregate_count",
                        "asp": "soft(aggregate_count,E) :- aggregate(E,count).",
                        "weight": 0,
                        "witness": "soft(aggregate_count,e1)"
                    }
                ],
                "type_q": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_q",
                        "asp": "soft(type_q,E) :- type(E,quantitative).",
                        "weight": 0,
                        "witness": "soft(type_q,e1)"
                    }
                ],
                "encoding_field": [
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e0)"
                    }
                ],
                "encoding": [
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e0)"
                    },
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e1)"
                    }
                ],
                "aggregate": [
                    {
                        "description": "Prefer to use raw (no aggregate).",
                        "type": "soft",
                        "name": "aggregate",
                        "asp": "soft(aggregate,E) :- aggregate(E,_).",
                        "weight": 1,
                        "witness": "soft(aggregate,e1)"
                    }
                ],
                "continuous_y": [
                    {
                        "description": "Continuous on y channel.",
                        "type": "soft",
                        "name": "continuous_y",
                        "asp": "soft(continuous_y,E) :- channel(E,y), continuous(E).",
                        "weight": 0,
                        "witness": "soft(continuous_y,e1)"
                    }
                ],
                "continuous_x": [
                    {
                        "description": "Continuous on x channel.",
                        "type": "soft",
                        "name": "continuous_x",
                        "asp": "soft(continuous_x,E) :- channel(E,x), continuous(E).",
                        "weight": 0,
                        "witness": "soft(continuous_x,e0)"
                    }
                ],
                "c_c_point": [
                    {
                        "description": "Continuous by continuous for point mark.",
                        "type": "soft",
                        "name": "c_c_point",
                        "asp": "soft(c_c_point) :- is_c_c, mark(point).",
                        "weight": 0,
                        "witness": "soft(c_c_point,_placeholder)"
                    }
                ],
                "agg_dim": [
                    {
                        "description": "Aggregate should also have a discrete encoding to group by.",
                        "type": "soft",
                        "name": "agg_dim",
                        "asp": "soft(agg_dim) :- aggregate(_,_), not discrete(_).",
                        "weight": 2,
                        "witness": "soft(agg_dim,_placeholder)"
                    }
                ],
                "zero": [
                    {
                        "description": "Prefer to include zero for continuous (binned doesn't need zero).",
                        "type": "soft",
                        "name": "zero",
                        "asp": "soft(zero,E) :- continuous(E), not zero(E).",
                        "weight": 1,
                        "witness": "soft(zero,e0)"
                    }
                ],
                "aggregate_group_by_raw": [
                    {
                        "description": "Aggregate plots should not use raw continuous as group by.",
                        "type": "soft",
                        "name": "aggregate_group_by_raw",
                        "asp": "soft(aggregate_group_by_raw,E) :- aggregate(_,_), continuous(E), not aggregate(E,_).",
                        "weight": 3,
                        "witness": "soft(aggregate_group_by_raw,e0)"
                    }
                ],
                "zero_positional": [
                    {
                        "description": "Prefer zero positional.",
                        "type": "soft",
                        "name": "zero_positional",
                        "asp": "soft(zero_positional) :- continuous(E), channel(E,(x;y)), not zero(E).",
                        "weight": 1,
                        "witness": "soft(zero_positional,_placeholder)"
                    }
                ]
            },
            "facts": [
                "data(\"cars.json\")",
                "mark(point)",
                "zero(e1)",
                "aggregate(e1,count)",
                "channel(e0,x)",
                "channel(e1,y)",
                "field(e0,\"year\")",
                "soft(aggregate_count,e1)",
                "soft(type_q,e1)",
                "soft(encoding_field,e0)",
                "soft(encoding,e0)",
                "soft(encoding,e1)",
                "soft(aggregate,e1)",
                "type(e0,temporal)",
                "type(e1,quantitative)",
                "soft(continuous_y,e1)",
                "soft(continuous_x,e0)",
                "soft(c_c_point,_placeholder)",
                "soft(agg_dim,_placeholder)",
                "soft(zero,e0)",
                "soft(aggregate_group_by_raw,e0)",
                "soft(zero_positional,_placeholder)"
            ]
        }
    },
    "85": {
        "type": "chart",
        "id": "85",
        "comparator": "<",
        "vlSpec": {
            "mark": "tick",
            "encoding": {
                "x": {
                    "timeUnit": "month",
                    "field": "year",
                    "type": "temporal"
                },
                "y": {
                    "aggregate": "count",
                    "type": "quantitative"
                }
            },
            "config": {
                "line": {
                    "point": true
                },
                "scale": {
                    "useUnaggregatedDomain": true
                }
            },
            "data": {
                "url": "cars.json"
            }
        },
        "sol": {
            "violations": {
                "aggregate_count": [
                    {
                        "description": "Count as aggregate op.",
                        "type": "soft",
                        "name": "aggregate_count",
                        "asp": "soft(aggregate_count,E) :- aggregate(E,count).",
                        "weight": 0,
                        "witness": "soft(aggregate_count,e1)"
                    }
                ],
                "type_q": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_q",
                        "asp": "soft(type_q,E) :- type(E,quantitative).",
                        "weight": 0,
                        "witness": "soft(type_q,e1)"
                    }
                ],
                "encoding_field": [
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e0)"
                    }
                ],
                "encoding": [
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e0)"
                    },
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e1)"
                    }
                ],
                "aggregate": [
                    {
                        "description": "Prefer to use raw (no aggregate).",
                        "type": "soft",
                        "name": "aggregate",
                        "asp": "soft(aggregate,E) :- aggregate(E,_).",
                        "weight": 1,
                        "witness": "soft(aggregate,e1)"
                    }
                ],
                "continuous_y": [
                    {
                        "description": "Continuous on y channel.",
                        "type": "soft",
                        "name": "continuous_y",
                        "asp": "soft(continuous_y,E) :- channel(E,y), continuous(E).",
                        "weight": 0,
                        "witness": "soft(continuous_y,e1)"
                    }
                ],
                "continuous_x": [
                    {
                        "description": "Continuous on x channel.",
                        "type": "soft",
                        "name": "continuous_x",
                        "asp": "soft(continuous_x,E) :- channel(E,x), continuous(E).",
                        "weight": 0,
                        "witness": "soft(continuous_x,e0)"
                    }
                ],
                "c_c_tick": [
                    {
                        "description": "Continuous by continuous for tick mark.",
                        "type": "soft",
                        "name": "c_c_tick",
                        "asp": "soft(c_c_tick) :- is_c_c, mark(tick).",
                        "weight": 5,
                        "witness": "soft(c_c_tick,_placeholder)"
                    }
                ],
                "agg_dim": [
                    {
                        "description": "Aggregate should also have a discrete encoding to group by.",
                        "type": "soft",
                        "name": "agg_dim",
                        "asp": "soft(agg_dim) :- aggregate(_,_), not discrete(_).",
                        "weight": 2,
                        "witness": "soft(agg_dim,_placeholder)"
                    }
                ],
                "zero": [
                    {
                        "description": "Prefer to include zero for continuous (binned doesn't need zero).",
                        "type": "soft",
                        "name": "zero",
                        "asp": "soft(zero,E) :- continuous(E), not zero(E).",
                        "weight": 1,
                        "witness": "soft(zero,e0)"
                    }
                ],
                "aggregate_group_by_raw": [
                    {
                        "description": "Aggregate plots should not use raw continuous as group by.",
                        "type": "soft",
                        "name": "aggregate_group_by_raw",
                        "asp": "soft(aggregate_group_by_raw,E) :- aggregate(_,_), continuous(E), not aggregate(E,_).",
                        "weight": 3,
                        "witness": "soft(aggregate_group_by_raw,e0)"
                    }
                ],
                "zero_positional": [
                    {
                        "description": "Prefer zero positional.",
                        "type": "soft",
                        "name": "zero_positional",
                        "asp": "soft(zero_positional) :- continuous(E), channel(E,(x;y)), not zero(E).",
                        "weight": 1,
                        "witness": "soft(zero_positional,_placeholder)"
                    }
                ]
            },
            "facts": [
                "data(\"cars.json\")",
                "mark(tick)",
                "zero(e1)",
                "aggregate(e1,count)",
                "channel(e0,x)",
                "channel(e1,y)",
                "field(e0,\"year\")",
                "soft(aggregate_count,e1)",
                "soft(type_q,e1)",
                "soft(encoding_field,e0)",
                "soft(encoding,e0)",
                "soft(encoding,e1)",
                "soft(aggregate,e1)",
                "type(e0,temporal)",
                "type(e1,quantitative)",
                "soft(continuous_y,e1)",
                "soft(continuous_x,e0)",
                "soft(c_c_tick,_placeholder)",
                "soft(agg_dim,_placeholder)",
                "soft(zero,e0)",
                "soft(aggregate_group_by_raw,e0)",
                "soft(zero_positional,_placeholder)"
            ]
        }
    },
    "87": {
        "type": "chart",
        "id": "87",
        "comparator": "<",
        "vlSpec": {
            "mark": "rule",
            "encoding": {
                "x": {
                    "timeUnit": "month",
                    "field": "year",
                    "type": "temporal"
                },
                "y": {
                    "aggregate": "count",
                    "type": "quantitative"
                }
            },
            "config": {
                "line": {
                    "point": true
                },
                "scale": {
                    "useUnaggregatedDomain": true
                }
            },
            "data": {
                "url": "cars.json"
            }
        },
        "sol": "unsat"
    },
    "88": {
        "type": "chart",
        "id": "88",
        "comparator": "<",
        "vlSpec": {
            "mark": "point",
            "encoding": {
                "x": {
                    "field": "origin",
                    "type": "nominal"
                },
                "y": {
                    "field": "cylinders",
                    "type": "nominal"
                },
                "size": {
                    "aggregate": "count",
                    "type": "quantitative"
                }
            },
            "config": {
                "line": {
                    "point": true
                },
                "scale": {
                    "useUnaggregatedDomain": true
                }
            },
            "data": {
                "url": "cars.json"
            }
        },
        "sol": {
            "violations": {
                "aggregate_count": [
                    {
                        "description": "Count as aggregate op.",
                        "type": "soft",
                        "name": "aggregate_count",
                        "asp": "soft(aggregate_count,E) :- aggregate(E,count).",
                        "weight": 0,
                        "witness": "soft(aggregate_count,e2)"
                    }
                ],
                "nominal_y": [
                    {
                        "description": "Nominal on y channel.",
                        "type": "soft",
                        "name": "nominal_y",
                        "asp": "soft(nominal_y,E) :- channel(E,y), type(E,nominal).",
                        "weight": 0,
                        "witness": "soft(nominal_y,e1)"
                    }
                ],
                "nominal_x": [
                    {
                        "description": "Nominal on x channel.",
                        "type": "soft",
                        "name": "nominal_x",
                        "asp": "soft(nominal_x,E) :- channel(E,x), type(E,nominal).",
                        "weight": 3,
                        "witness": "soft(nominal_x,e0)"
                    }
                ],
                "type_n": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_n",
                        "asp": "soft(type_n,E) :- type(E,nominal).",
                        "weight": 2,
                        "witness": "soft(type_n,e0)"
                    },
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_n",
                        "asp": "soft(type_n,E) :- type(E,nominal).",
                        "weight": 2,
                        "witness": "soft(type_n,e1)"
                    }
                ],
                "type_q": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_q",
                        "asp": "soft(type_q,E) :- type(E,quantitative).",
                        "weight": 0,
                        "witness": "soft(type_q,e2)"
                    }
                ],
                "number_nominal": [
                    {
                        "description": "Numbers should not be nominal.",
                        "type": "soft",
                        "name": "number_nominal",
                        "asp": "soft(number_nominal,E) :- type(E,nominal), field(E,F), fieldtype(F,number).",
                        "weight": 10,
                        "witness": "soft(number_nominal,e1)"
                    }
                ],
                "encoding_field": [
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e0)"
                    },
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e1)"
                    }
                ],
                "encoding": [
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e0)"
                    },
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e1)"
                    },
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e2)"
                    }
                ],
                "aggregate": [
                    {
                        "description": "Prefer to use raw (no aggregate).",
                        "type": "soft",
                        "name": "aggregate",
                        "asp": "soft(aggregate,E) :- aggregate(E,_).",
                        "weight": 1,
                        "witness": "soft(aggregate,e2)"
                    }
                ],
                "d_d_point": [
                    {
                        "description": "Discrete by discrete for point mark.",
                        "type": "soft",
                        "name": "d_d_point",
                        "asp": "soft(d_d_point) :- is_d_d, mark(point).",
                        "weight": 0,
                        "witness": "soft(d_d_point,_placeholder)"
                    }
                ],
                "continuous_size": [
                    {
                        "description": "Continuous on size channel.",
                        "type": "soft",
                        "name": "continuous_size",
                        "asp": "soft(continuous_size,E) :- channel(E,size), continuous(E).",
                        "weight": 1,
                        "witness": "soft(continuous_size,e2)"
                    }
                ]
            },
            "facts": [
                "data(\"cars.json\")",
                "mark(point)",
                "zero(e2)",
                "aggregate(e2,count)",
                "channel(e0,x)",
                "channel(e1,y)",
                "channel(e2,size)",
                "field(e0,\"origin\")",
                "field(e1,\"cylinders\")",
                "soft(aggregate_count,e2)",
                "soft(nominal_y,e1)",
                "soft(nominal_x,e0)",
                "soft(type_n,e0)",
                "soft(type_n,e1)",
                "soft(type_q,e2)",
                "soft(number_nominal,e1)",
                "soft(encoding_field,e0)",
                "soft(encoding_field,e1)",
                "soft(encoding,e0)",
                "soft(encoding,e1)",
                "soft(encoding,e2)",
                "soft(aggregate,e2)",
                "soft(d_d_point,_placeholder)",
                "type(e0,nominal)",
                "type(e1,nominal)",
                "type(e2,quantitative)",
                "soft(continuous_size,e2)"
            ]
        }
    },
    "89": {
        "type": "chart",
        "id": "89",
        "comparator": "<",
        "vlSpec": {
            "mark": "bar",
            "encoding": {
                "x": {
                    "field": "origin",
                    "type": "nominal"
                },
                "color": {
                    "field": "cylinders",
                    "type": "nominal"
                },
                "y": {
                    "aggregate": "count",
                    "type": "quantitative"
                }
            },
            "config": {
                "line": {
                    "point": true
                },
                "scale": {
                    "useUnaggregatedDomain": true
                }
            },
            "data": {
                "url": "cars.json"
            }
        },
        "sol": {
            "violations": {
                "aggregate_count": [
                    {
                        "description": "Count as aggregate op.",
                        "type": "soft",
                        "name": "aggregate_count",
                        "asp": "soft(aggregate_count,E) :- aggregate(E,count).",
                        "weight": 0,
                        "witness": "soft(aggregate_count,e2)"
                    }
                ],
                "nominal_color": [
                    {
                        "description": "Nominal on color channel.",
                        "type": "soft",
                        "name": "nominal_color",
                        "asp": "soft(nominal_color,E) :- channel(E,color), type(E,nominal).",
                        "weight": 10,
                        "witness": "soft(nominal_color,e1)"
                    }
                ],
                "nominal_x": [
                    {
                        "description": "Nominal on x channel.",
                        "type": "soft",
                        "name": "nominal_x",
                        "asp": "soft(nominal_x,E) :- channel(E,x), type(E,nominal).",
                        "weight": 3,
                        "witness": "soft(nominal_x,e0)"
                    }
                ],
                "type_n": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_n",
                        "asp": "soft(type_n,E) :- type(E,nominal).",
                        "weight": 2,
                        "witness": "soft(type_n,e0)"
                    },
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_n",
                        "asp": "soft(type_n,E) :- type(E,nominal).",
                        "weight": 2,
                        "witness": "soft(type_n,e1)"
                    }
                ],
                "type_q": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_q",
                        "asp": "soft(type_q,E) :- type(E,quantitative).",
                        "weight": 0,
                        "witness": "soft(type_q,e2)"
                    }
                ],
                "number_nominal": [
                    {
                        "description": "Numbers should not be nominal.",
                        "type": "soft",
                        "name": "number_nominal",
                        "asp": "soft(number_nominal,E) :- type(E,nominal), field(E,F), fieldtype(F,number).",
                        "weight": 10,
                        "witness": "soft(number_nominal,e1)"
                    }
                ],
                "encoding_field": [
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e0)"
                    },
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e1)"
                    }
                ],
                "encoding": [
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e0)"
                    },
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e1)"
                    },
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e2)"
                    }
                ],
                "aggregate": [
                    {
                        "description": "Prefer to use raw (no aggregate).",
                        "type": "soft",
                        "name": "aggregate",
                        "asp": "soft(aggregate,E) :- aggregate(E,_).",
                        "weight": 1,
                        "witness": "soft(aggregate,e2)"
                    }
                ],
                "continuous_y": [
                    {
                        "description": "Continuous on y channel.",
                        "type": "soft",
                        "name": "continuous_y",
                        "asp": "soft(continuous_y,E) :- channel(E,y), continuous(E).",
                        "weight": 0,
                        "witness": "soft(continuous_y,e2)"
                    }
                ],
                "c_d_bar": [
                    {
                        "description": "Continuous by discrete for bar mark.",
                        "type": "soft",
                        "name": "c_d_bar",
                        "asp": "soft(c_d_bar) :- is_c_d, not no_overlap, mark(bar).",
                        "weight": 20,
                        "witness": "soft(c_d_bar,_placeholder)"
                    }
                ]
            },
            "facts": [
                "data(\"cars.json\")",
                "mark(bar)",
                "zero(e2)",
                "aggregate(e2,count)",
                "channel(e0,x)",
                "channel(e1,color)",
                "channel(e2,y)",
                "field(e0,\"origin\")",
                "field(e1,\"cylinders\")",
                "soft(aggregate_count,e2)",
                "soft(nominal_color,e1)",
                "soft(nominal_x,e0)",
                "soft(type_n,e0)",
                "soft(type_n,e1)",
                "soft(type_q,e2)",
                "soft(number_nominal,e1)",
                "soft(encoding_field,e0)",
                "soft(encoding_field,e1)",
                "soft(encoding,e0)",
                "soft(encoding,e1)",
                "soft(encoding,e2)",
                "soft(aggregate,e2)",
                "type(e0,nominal)",
                "type(e1,nominal)",
                "type(e2,quantitative)",
                "soft(continuous_y,e2)",
                "soft(c_d_bar,_placeholder)"
            ]
        }
    },
    "90": {
        "type": "chart",
        "id": "90",
        "comparator": "<",
        "vlSpec": {
            "mark": "tick",
            "encoding": {
                "x": {
                    "field": "horsepower",
                    "type": "quantitative"
                },
                "y": {
                    "field": "origin",
                    "type": "nominal"
                }
            },
            "config": {
                "line": {
                    "point": true
                },
                "scale": {
                    "useUnaggregatedDomain": true
                }
            },
            "data": {
                "url": "cars.json"
            }
        },
        "sol": {
            "violations": {
                "nominal_y": [
                    {
                        "description": "Nominal on y channel.",
                        "type": "soft",
                        "name": "nominal_y",
                        "asp": "soft(nominal_y,E) :- channel(E,y), type(E,nominal).",
                        "weight": 0,
                        "witness": "soft(nominal_y,e1)"
                    }
                ],
                "type_n": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_n",
                        "asp": "soft(type_n,E) :- type(E,nominal).",
                        "weight": 2,
                        "witness": "soft(type_n,e1)"
                    }
                ],
                "type_q": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_q",
                        "asp": "soft(type_q,E) :- type(E,quantitative).",
                        "weight": 0,
                        "witness": "soft(type_q,e0)"
                    }
                ],
                "encoding_field": [
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e0)"
                    },
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e1)"
                    }
                ],
                "encoding": [
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e0)"
                    },
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e1)"
                    }
                ],
                "continuous_x": [
                    {
                        "description": "Continuous on x channel.",
                        "type": "soft",
                        "name": "continuous_x",
                        "asp": "soft(continuous_x,E) :- channel(E,x), continuous(E).",
                        "weight": 0,
                        "witness": "soft(continuous_x,e0)"
                    }
                ],
                "c_d_tick": [
                    {
                        "description": "Continuous by discrete for tick mark.",
                        "type": "soft",
                        "name": "c_d_tick",
                        "asp": "soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).",
                        "weight": 0,
                        "witness": "soft(c_d_tick,_placeholder)"
                    }
                ]
            },
            "facts": [
                "data(\"cars.json\")",
                "mark(tick)",
                "zero(e0)",
                "channel(e0,x)",
                "channel(e1,y)",
                "field(e0,\"horsepower\")",
                "field(e1,\"origin\")",
                "soft(nominal_y,e1)",
                "soft(type_n,e1)",
                "soft(type_q,e0)",
                "soft(encoding_field,e0)",
                "soft(encoding_field,e1)",
                "soft(encoding,e0)",
                "soft(encoding,e1)",
                "type(e0,quantitative)",
                "type(e1,nominal)",
                "soft(continuous_x,e0)",
                "soft(c_d_tick,_placeholder)"
            ]
        }
    },
    "91": {
        "type": "chart",
        "id": "91",
        "comparator": "<",
        "vlSpec": {
            "mark": "point",
            "encoding": {
                "x": {
                    "field": "horsepower",
                    "type": "quantitative"
                },
                "y": {
                    "field": "origin",
                    "type": "nominal"
                }
            },
            "config": {
                "line": {
                    "point": true
                },
                "scale": {
                    "useUnaggregatedDomain": true
                }
            },
            "data": {
                "url": "cars.json"
            }
        },
        "sol": {
            "violations": {
                "nominal_y": [
                    {
                        "description": "Nominal on y channel.",
                        "type": "soft",
                        "name": "nominal_y",
                        "asp": "soft(nominal_y,E) :- channel(E,y), type(E,nominal).",
                        "weight": 0,
                        "witness": "soft(nominal_y,e1)"
                    }
                ],
                "type_n": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_n",
                        "asp": "soft(type_n,E) :- type(E,nominal).",
                        "weight": 2,
                        "witness": "soft(type_n,e1)"
                    }
                ],
                "type_q": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_q",
                        "asp": "soft(type_q,E) :- type(E,quantitative).",
                        "weight": 0,
                        "witness": "soft(type_q,e0)"
                    }
                ],
                "encoding_field": [
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e0)"
                    },
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e1)"
                    }
                ],
                "encoding": [
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e0)"
                    },
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e1)"
                    }
                ],
                "continuous_x": [
                    {
                        "description": "Continuous on x channel.",
                        "type": "soft",
                        "name": "continuous_x",
                        "asp": "soft(continuous_x,E) :- channel(E,x), continuous(E).",
                        "weight": 0,
                        "witness": "soft(continuous_x,e0)"
                    }
                ],
                "c_d_point": [
                    {
                        "description": "Continuous by discrete for point mark.",
                        "type": "soft",
                        "name": "c_d_point",
                        "asp": "soft(c_d_point) :- is_c_d, not no_overlap, mark(point).",
                        "weight": 10,
                        "witness": "soft(c_d_point,_placeholder)"
                    }
                ]
            },
            "facts": [
                "data(\"cars.json\")",
                "mark(point)",
                "zero(e0)",
                "channel(e0,x)",
                "channel(e1,y)",
                "field(e0,\"horsepower\")",
                "field(e1,\"origin\")",
                "soft(nominal_y,e1)",
                "soft(type_n,e1)",
                "soft(type_q,e0)",
                "soft(encoding_field,e0)",
                "soft(encoding_field,e1)",
                "soft(encoding,e0)",
                "soft(encoding,e1)",
                "type(e0,quantitative)",
                "type(e1,nominal)",
                "soft(continuous_x,e0)",
                "soft(c_d_point,_placeholder)"
            ]
        }
    },
    "93": {
        "type": "chart",
        "id": "93",
        "comparator": "<",
        "vlSpec": {
            "mark": "square",
            "encoding": {
                "x": {
                    "field": "horsepower",
                    "type": "quantitative"
                },
                "y": {
                    "field": "origin",
                    "type": "nominal"
                }
            },
            "config": {
                "line": {
                    "point": true
                },
                "scale": {
                    "useUnaggregatedDomain": true
                }
            },
            "data": {
                "url": "cars.json"
            }
        },
        "sol": "unsat"
    },
    "95": {
        "type": "chart",
        "id": "95",
        "comparator": "<",
        "vlSpec": {
            "mark": "circle",
            "encoding": {
                "x": {
                    "field": "horsepower",
                    "type": "quantitative"
                },
                "y": {
                    "field": "origin",
                    "type": "nominal"
                }
            },
            "config": {
                "line": {
                    "point": true
                },
                "scale": {
                    "useUnaggregatedDomain": true
                }
            },
            "data": {
                "url": "cars.json"
            }
        },
        "sol": "unsat"
    },
    "96": {
        "type": "chart",
        "id": "96",
        "comparator": "<",
        "vlSpec": {
            "mark": "bar",
            "encoding": {
                "x": {
                    "aggregate": "mean",
                    "field": "horsepower",
                    "type": "quantitative"
                },
                "y": {
                    "field": "origin",
                    "type": "nominal"
                }
            },
            "config": {
                "line": {
                    "point": true
                },
                "scale": {
                    "useUnaggregatedDomain": true
                }
            },
            "data": {
                "url": "cars.json"
            }
        },
        "sol": {
            "violations": {
                "aggregate_mean": [
                    {
                        "description": "Mean as aggregate op.",
                        "type": "soft",
                        "name": "aggregate_mean",
                        "asp": "soft(aggregate_mean,E) :- aggregate(E,mean).",
                        "weight": 1,
                        "witness": "soft(aggregate_mean,e0)"
                    }
                ],
                "nominal_y": [
                    {
                        "description": "Nominal on y channel.",
                        "type": "soft",
                        "name": "nominal_y",
                        "asp": "soft(nominal_y,E) :- channel(E,y), type(E,nominal).",
                        "weight": 0,
                        "witness": "soft(nominal_y,e1)"
                    }
                ],
                "type_n": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_n",
                        "asp": "soft(type_n,E) :- type(E,nominal).",
                        "weight": 2,
                        "witness": "soft(type_n,e1)"
                    }
                ],
                "type_q": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_q",
                        "asp": "soft(type_q,E) :- type(E,quantitative).",
                        "weight": 0,
                        "witness": "soft(type_q,e0)"
                    }
                ],
                "encoding_field": [
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e0)"
                    },
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e1)"
                    }
                ],
                "encoding": [
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e0)"
                    },
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e1)"
                    }
                ],
                "aggregate": [
                    {
                        "description": "Prefer to use raw (no aggregate).",
                        "type": "soft",
                        "name": "aggregate",
                        "asp": "soft(aggregate,E) :- aggregate(E,_).",
                        "weight": 1,
                        "witness": "soft(aggregate,e0)"
                    }
                ],
                "continuous_x": [
                    {
                        "description": "Continuous on x channel.",
                        "type": "soft",
                        "name": "continuous_x",
                        "asp": "soft(continuous_x,E) :- channel(E,x), continuous(E).",
                        "weight": 0,
                        "witness": "soft(continuous_x,e0)"
                    }
                ],
                "c_d_no_overlap_bar": [
                    {
                        "description": "Continuous by discrete for bar mark with no overlap.",
                        "type": "soft",
                        "name": "c_d_no_overlap_bar",
                        "asp": "soft(c_d_no_overlap_bar) :- is_c_d, no_overlap, mark(bar).",
                        "weight": 0,
                        "witness": "soft(c_d_no_overlap_bar,_placeholder)"
                    }
                ]
            },
            "facts": [
                "data(\"cars.json\")",
                "mark(bar)",
                "zero(e0)",
                "aggregate(e0,mean)",
                "channel(e0,x)",
                "channel(e1,y)",
                "field(e0,\"horsepower\")",
                "field(e1,\"origin\")",
                "soft(aggregate_mean,e0)",
                "soft(nominal_y,e1)",
                "soft(type_n,e1)",
                "soft(type_q,e0)",
                "soft(encoding_field,e0)",
                "soft(encoding_field,e1)",
                "soft(encoding,e0)",
                "soft(encoding,e1)",
                "soft(aggregate,e0)",
                "type(e0,quantitative)",
                "type(e1,nominal)",
                "soft(continuous_x,e0)",
                "soft(c_d_no_overlap_bar,_placeholder)"
            ]
        }
    },
    "97": {
        "type": "chart",
        "id": "97",
        "comparator": "<",
        "vlSpec": {
            "mark": "point",
            "encoding": {
                "x": {
                    "aggregate": "mean",
                    "field": "horsepower",
                    "type": "quantitative"
                },
                "y": {
                    "field": "origin",
                    "type": "nominal"
                }
            },
            "config": {
                "line": {
                    "point": true
                },
                "scale": {
                    "useUnaggregatedDomain": true
                }
            },
            "data": {
                "url": "cars.json"
            }
        },
        "sol": {
            "violations": {
                "aggregate_mean": [
                    {
                        "description": "Mean as aggregate op.",
                        "type": "soft",
                        "name": "aggregate_mean",
                        "asp": "soft(aggregate_mean,E) :- aggregate(E,mean).",
                        "weight": 1,
                        "witness": "soft(aggregate_mean,e0)"
                    }
                ],
                "nominal_y": [
                    {
                        "description": "Nominal on y channel.",
                        "type": "soft",
                        "name": "nominal_y",
                        "asp": "soft(nominal_y,E) :- channel(E,y), type(E,nominal).",
                        "weight": 0,
                        "witness": "soft(nominal_y,e1)"
                    }
                ],
                "type_n": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_n",
                        "asp": "soft(type_n,E) :- type(E,nominal).",
                        "weight": 2,
                        "witness": "soft(type_n,e1)"
                    }
                ],
                "type_q": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_q",
                        "asp": "soft(type_q,E) :- type(E,quantitative).",
                        "weight": 0,
                        "witness": "soft(type_q,e0)"
                    }
                ],
                "encoding_field": [
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e0)"
                    },
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e1)"
                    }
                ],
                "encoding": [
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e0)"
                    },
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e1)"
                    }
                ],
                "aggregate": [
                    {
                        "description": "Prefer to use raw (no aggregate).",
                        "type": "soft",
                        "name": "aggregate",
                        "asp": "soft(aggregate,E) :- aggregate(E,_).",
                        "weight": 1,
                        "witness": "soft(aggregate,e0)"
                    }
                ],
                "continuous_x": [
                    {
                        "description": "Continuous on x channel.",
                        "type": "soft",
                        "name": "continuous_x",
                        "asp": "soft(continuous_x,E) :- channel(E,x), continuous(E).",
                        "weight": 0,
                        "witness": "soft(continuous_x,e0)"
                    }
                ],
                "c_d_no_overlap_point": [
                    {
                        "description": "Continuous by discrete for point mark with no overlap.",
                        "type": "soft",
                        "name": "c_d_no_overlap_point",
                        "asp": "soft(c_d_no_overlap_point) :- is_c_d, no_overlap, mark(point).",
                        "weight": 20,
                        "witness": "soft(c_d_no_overlap_point,_placeholder)"
                    }
                ]
            },
            "facts": [
                "data(\"cars.json\")",
                "mark(point)",
                "zero(e0)",
                "aggregate(e0,mean)",
                "channel(e0,x)",
                "channel(e1,y)",
                "field(e0,\"horsepower\")",
                "field(e1,\"origin\")",
                "soft(aggregate_mean,e0)",
                "soft(nominal_y,e1)",
                "soft(type_n,e1)",
                "soft(type_q,e0)",
                "soft(encoding_field,e0)",
                "soft(encoding_field,e1)",
                "soft(encoding,e0)",
                "soft(encoding,e1)",
                "soft(aggregate,e0)",
                "type(e0,quantitative)",
                "type(e1,nominal)",
                "soft(continuous_x,e0)",
                "soft(c_d_no_overlap_point,_placeholder)"
            ]
        }
    },
    "99": {
        "type": "chart",
        "id": "99",
        "comparator": "<",
        "vlSpec": {
            "mark": "square",
            "encoding": {
                "x": {
                    "aggregate": "mean",
                    "field": "horsepower",
                    "type": "quantitative"
                },
                "y": {
                    "field": "origin",
                    "type": "nominal"
                }
            },
            "config": {
                "line": {
                    "point": true
                },
                "scale": {
                    "useUnaggregatedDomain": true
                }
            },
            "data": {
                "url": "cars.json"
            }
        },
        "sol": "unsat"
    },
    "101": {
        "type": "chart",
        "id": "101",
        "comparator": "<",
        "vlSpec": {
            "mark": "circle",
            "encoding": {
                "x": {
                    "aggregate": "mean",
                    "field": "horsepower",
                    "type": "quantitative"
                },
                "y": {
                    "field": "origin",
                    "type": "nominal"
                }
            },
            "config": {
                "line": {
                    "point": true
                },
                "scale": {
                    "useUnaggregatedDomain": true
                }
            },
            "data": {
                "url": "cars.json"
            }
        },
        "sol": "unsat"
    },
    "103": {
        "type": "chart",
        "id": "103",
        "comparator": "<",
        "vlSpec": {
            "mark": "tick",
            "encoding": {
                "x": {
                    "aggregate": "mean",
                    "field": "horsepower",
                    "type": "quantitative"
                },
                "y": {
                    "field": "origin",
                    "type": "nominal"
                }
            },
            "config": {
                "line": {
                    "point": true
                },
                "scale": {
                    "useUnaggregatedDomain": true
                }
            },
            "data": {
                "url": "cars.json"
            }
        },
        "sol": {
            "violations": {
                "aggregate_mean": [
                    {
                        "description": "Mean as aggregate op.",
                        "type": "soft",
                        "name": "aggregate_mean",
                        "asp": "soft(aggregate_mean,E) :- aggregate(E,mean).",
                        "weight": 1,
                        "witness": "soft(aggregate_mean,e0)"
                    }
                ],
                "nominal_y": [
                    {
                        "description": "Nominal on y channel.",
                        "type": "soft",
                        "name": "nominal_y",
                        "asp": "soft(nominal_y,E) :- channel(E,y), type(E,nominal).",
                        "weight": 0,
                        "witness": "soft(nominal_y,e1)"
                    }
                ],
                "type_n": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_n",
                        "asp": "soft(type_n,E) :- type(E,nominal).",
                        "weight": 2,
                        "witness": "soft(type_n,e1)"
                    }
                ],
                "type_q": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_q",
                        "asp": "soft(type_q,E) :- type(E,quantitative).",
                        "weight": 0,
                        "witness": "soft(type_q,e0)"
                    }
                ],
                "encoding_field": [
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e0)"
                    },
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e1)"
                    }
                ],
                "encoding": [
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e0)"
                    },
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e1)"
                    }
                ],
                "aggregate": [
                    {
                        "description": "Prefer to use raw (no aggregate).",
                        "type": "soft",
                        "name": "aggregate",
                        "asp": "soft(aggregate,E) :- aggregate(E,_).",
                        "weight": 1,
                        "witness": "soft(aggregate,e0)"
                    }
                ],
                "continuous_x": [
                    {
                        "description": "Continuous on x channel.",
                        "type": "soft",
                        "name": "continuous_x",
                        "asp": "soft(continuous_x,E) :- channel(E,x), continuous(E).",
                        "weight": 0,
                        "witness": "soft(continuous_x,e0)"
                    }
                ],
                "c_d_no_overlap_tick": [
                    {
                        "description": "Continuous by discrete for tick mark with no overlap.",
                        "type": "soft",
                        "name": "c_d_no_overlap_tick",
                        "asp": "soft(c_d_no_overlap_tick) :- is_c_d, no_overlap, mark(tick).",
                        "weight": 25,
                        "witness": "soft(c_d_no_overlap_tick,_placeholder)"
                    }
                ]
            },
            "facts": [
                "data(\"cars.json\")",
                "mark(tick)",
                "zero(e0)",
                "aggregate(e0,mean)",
                "channel(e0,x)",
                "channel(e1,y)",
                "field(e0,\"horsepower\")",
                "field(e1,\"origin\")",
                "soft(aggregate_mean,e0)",
                "soft(nominal_y,e1)",
                "soft(type_n,e1)",
                "soft(type_q,e0)",
                "soft(encoding_field,e0)",
                "soft(encoding_field,e1)",
                "soft(encoding,e0)",
                "soft(encoding,e1)",
                "soft(aggregate,e0)",
                "type(e0,quantitative)",
                "type(e1,nominal)",
                "soft(continuous_x,e0)",
                "soft(c_d_no_overlap_tick,_placeholder)"
            ]
        }
    },
    "109": {
        "type": "chart",
        "id": "109",
        "comparator": "<",
        "vlSpec": {
            "mark": "line",
            "encoding": {
                "x": {
                    "aggregate": "mean",
                    "field": "horsepower",
                    "type": "quantitative"
                },
                "y": {
                    "field": "origin",
                    "type": "nominal"
                }
            },
            "config": {
                "line": {
                    "point": true
                },
                "scale": {
                    "useUnaggregatedDomain": true
                }
            },
            "data": {
                "url": "cars.json"
            }
        },
        "sol": {
            "violations": {
                "aggregate_mean": [
                    {
                        "description": "Mean as aggregate op.",
                        "type": "soft",
                        "name": "aggregate_mean",
                        "asp": "soft(aggregate_mean,E) :- aggregate(E,mean).",
                        "weight": 1,
                        "witness": "soft(aggregate_mean,e0)"
                    }
                ],
                "nominal_y": [
                    {
                        "description": "Nominal on y channel.",
                        "type": "soft",
                        "name": "nominal_y",
                        "asp": "soft(nominal_y,E) :- channel(E,y), type(E,nominal).",
                        "weight": 0,
                        "witness": "soft(nominal_y,e1)"
                    }
                ],
                "type_n": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_n",
                        "asp": "soft(type_n,E) :- type(E,nominal).",
                        "weight": 2,
                        "witness": "soft(type_n,e1)"
                    }
                ],
                "type_q": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_q",
                        "asp": "soft(type_q,E) :- type(E,quantitative).",
                        "weight": 0,
                        "witness": "soft(type_q,e0)"
                    }
                ],
                "encoding_field": [
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e0)"
                    },
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e1)"
                    }
                ],
                "encoding": [
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e0)"
                    },
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e1)"
                    }
                ],
                "aggregate": [
                    {
                        "description": "Prefer to use raw (no aggregate).",
                        "type": "soft",
                        "name": "aggregate",
                        "asp": "soft(aggregate,E) :- aggregate(E,_).",
                        "weight": 1,
                        "witness": "soft(aggregate,e0)"
                    }
                ],
                "continuous_x": [
                    {
                        "description": "Continuous on x channel.",
                        "type": "soft",
                        "name": "continuous_x",
                        "asp": "soft(continuous_x,E) :- channel(E,x), continuous(E).",
                        "weight": 0,
                        "witness": "soft(continuous_x,e0)"
                    }
                ],
                "c_d_no_overlap_line": [
                    {
                        "description": "Continuous by discrete for line mark with no overlap.",
                        "type": "soft",
                        "name": "c_d_no_overlap_line",
                        "asp": "soft(c_d_no_overlap_line) :- is_c_d, no_overlap, mark(line).",
                        "weight": 20,
                        "witness": "soft(c_d_no_overlap_line,_placeholder)"
                    }
                ]
            },
            "facts": [
                "data(\"cars.json\")",
                "mark(line)",
                "zero(e0)",
                "aggregate(e0,mean)",
                "channel(e0,x)",
                "channel(e1,y)",
                "field(e0,\"horsepower\")",
                "field(e1,\"origin\")",
                "soft(aggregate_mean,e0)",
                "soft(nominal_y,e1)",
                "soft(type_n,e1)",
                "soft(type_q,e0)",
                "soft(encoding_field,e0)",
                "soft(encoding_field,e1)",
                "soft(encoding,e0)",
                "soft(encoding,e1)",
                "soft(aggregate,e0)",
                "type(e0,quantitative)",
                "type(e1,nominal)",
                "soft(continuous_x,e0)",
                "soft(c_d_no_overlap_line,_placeholder)"
            ]
        }
    },
    "111": {
        "type": "chart",
        "id": "111",
        "comparator": "<",
        "vlSpec": {
            "mark": "area",
            "encoding": {
                "x": {
                    "aggregate": "mean",
                    "field": "horsepower",
                    "type": "quantitative"
                },
                "y": {
                    "field": "origin",
                    "type": "nominal"
                }
            },
            "config": {
                "line": {
                    "point": true
                },
                "scale": {
                    "useUnaggregatedDomain": true
                }
            },
            "data": {
                "url": "cars.json"
            }
        },
        "sol": {
            "violations": {
                "aggregate_mean": [
                    {
                        "description": "Mean as aggregate op.",
                        "type": "soft",
                        "name": "aggregate_mean",
                        "asp": "soft(aggregate_mean,E) :- aggregate(E,mean).",
                        "weight": 1,
                        "witness": "soft(aggregate_mean,e0)"
                    }
                ],
                "nominal_y": [
                    {
                        "description": "Nominal on y channel.",
                        "type": "soft",
                        "name": "nominal_y",
                        "asp": "soft(nominal_y,E) :- channel(E,y), type(E,nominal).",
                        "weight": 0,
                        "witness": "soft(nominal_y,e1)"
                    }
                ],
                "type_n": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_n",
                        "asp": "soft(type_n,E) :- type(E,nominal).",
                        "weight": 2,
                        "witness": "soft(type_n,e1)"
                    }
                ],
                "type_q": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_q",
                        "asp": "soft(type_q,E) :- type(E,quantitative).",
                        "weight": 0,
                        "witness": "soft(type_q,e0)"
                    }
                ],
                "encoding_field": [
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e0)"
                    },
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e1)"
                    }
                ],
                "encoding": [
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e0)"
                    },
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e1)"
                    }
                ],
                "aggregate": [
                    {
                        "description": "Prefer to use raw (no aggregate).",
                        "type": "soft",
                        "name": "aggregate",
                        "asp": "soft(aggregate,E) :- aggregate(E,_).",
                        "weight": 1,
                        "witness": "soft(aggregate,e0)"
                    }
                ],
                "continuous_x": [
                    {
                        "description": "Continuous on x channel.",
                        "type": "soft",
                        "name": "continuous_x",
                        "asp": "soft(continuous_x,E) :- channel(E,x), continuous(E).",
                        "weight": 0,
                        "witness": "soft(continuous_x,e0)"
                    }
                ],
                "c_d_no_overlap_area": [
                    {
                        "description": "Continuous by discrete for area mark with no overlap.",
                        "type": "soft",
                        "name": "c_d_no_overlap_area",
                        "asp": "soft(c_d_no_overlap_area) :- is_c_d, no_overlap, mark(area).",
                        "weight": 20,
                        "witness": "soft(c_d_no_overlap_area,_placeholder)"
                    }
                ]
            },
            "facts": [
                "data(\"cars.json\")",
                "mark(area)",
                "zero(e0)",
                "aggregate(e0,mean)",
                "channel(e0,x)",
                "channel(e1,y)",
                "field(e0,\"horsepower\")",
                "field(e1,\"origin\")",
                "soft(aggregate_mean,e0)",
                "soft(nominal_y,e1)",
                "soft(type_n,e1)",
                "soft(type_q,e0)",
                "soft(encoding_field,e0)",
                "soft(encoding_field,e1)",
                "soft(encoding,e0)",
                "soft(encoding,e1)",
                "soft(aggregate,e0)",
                "type(e0,quantitative)",
                "type(e1,nominal)",
                "soft(continuous_x,e0)",
                "soft(c_d_no_overlap_area,_placeholder)"
            ]
        }
    },
    "113": {
        "type": "chart",
        "id": "113",
        "comparator": "<",
        "vlSpec": {
            "mark": "rule",
            "encoding": {
                "x": {
                    "aggregate": "mean",
                    "field": "horsepower",
                    "type": "quantitative"
                },
                "y": {
                    "field": "origin",
                    "type": "nominal"
                }
            },
            "config": {
                "line": {
                    "point": true
                },
                "scale": {
                    "useUnaggregatedDomain": true
                }
            },
            "data": {
                "url": "cars.json"
            }
        },
        "sol": "unsat"
    },
    "116": {
        "type": "chart",
        "id": "116",
        "comparator": "<",
        "vlSpec": {
            "mark": "point",
            "encoding": {
                "x": {
                    "field": "horsepower",
                    "type": "quantitative"
                },
                "y": {
                    "field": "acceleration",
                    "type": "quantitative"
                },
                "color": {
                    "field": "origin",
                    "type": "nominal"
                }
            },
            "config": {
                "line": {
                    "point": true
                },
                "scale": {
                    "useUnaggregatedDomain": true
                }
            },
            "data": {
                "url": "cars.json"
            }
        },
        "sol": {
            "violations": {
                "nominal_color": [
                    {
                        "description": "Nominal on color channel.",
                        "type": "soft",
                        "name": "nominal_color",
                        "asp": "soft(nominal_color,E) :- channel(E,color), type(E,nominal).",
                        "weight": 10,
                        "witness": "soft(nominal_color,e2)"
                    }
                ],
                "type_n": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_n",
                        "asp": "soft(type_n,E) :- type(E,nominal).",
                        "weight": 2,
                        "witness": "soft(type_n,e2)"
                    }
                ],
                "type_q": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_q",
                        "asp": "soft(type_q,E) :- type(E,quantitative).",
                        "weight": 0,
                        "witness": "soft(type_q,e0)"
                    },
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_q",
                        "asp": "soft(type_q,E) :- type(E,quantitative).",
                        "weight": 0,
                        "witness": "soft(type_q,e1)"
                    }
                ],
                "encoding_field": [
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e0)"
                    },
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e1)"
                    },
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e2)"
                    }
                ],
                "encoding": [
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e0)"
                    },
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e1)"
                    },
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e2)"
                    }
                ],
                "continuous_y": [
                    {
                        "description": "Continuous on y channel.",
                        "type": "soft",
                        "name": "continuous_y",
                        "asp": "soft(continuous_y,E) :- channel(E,y), continuous(E).",
                        "weight": 0,
                        "witness": "soft(continuous_y,e1)"
                    }
                ],
                "continuous_x": [
                    {
                        "description": "Continuous on x channel.",
                        "type": "soft",
                        "name": "continuous_x",
                        "asp": "soft(continuous_x,E) :- channel(E,x), continuous(E).",
                        "weight": 0,
                        "witness": "soft(continuous_x,e0)"
                    }
                ],
                "c_c_point": [
                    {
                        "description": "Continuous by continuous for point mark.",
                        "type": "soft",
                        "name": "c_c_point",
                        "asp": "soft(c_c_point) :- is_c_c, mark(point).",
                        "weight": 0,
                        "witness": "soft(c_c_point,_placeholder)"
                    }
                ]
            },
            "facts": [
                "data(\"cars.json\")",
                "mark(point)",
                "zero(e0)",
                "zero(e1)",
                "channel(e0,x)",
                "channel(e1,y)",
                "channel(e2,color)",
                "field(e0,\"horsepower\")",
                "field(e1,\"acceleration\")",
                "field(e2,\"origin\")",
                "soft(nominal_color,e2)",
                "soft(type_n,e2)",
                "soft(type_q,e0)",
                "soft(type_q,e1)",
                "soft(encoding_field,e0)",
                "soft(encoding_field,e1)",
                "soft(encoding_field,e2)",
                "soft(encoding,e0)",
                "soft(encoding,e1)",
                "soft(encoding,e2)",
                "type(e0,quantitative)",
                "type(e1,quantitative)",
                "type(e2,nominal)",
                "soft(continuous_y,e1)",
                "soft(continuous_x,e0)",
                "soft(c_c_point,_placeholder)"
            ]
        }
    },
    "117": {
        "type": "chart",
        "id": "117",
        "comparator": "<",
        "vlSpec": {
            "mark": "point",
            "encoding": {
                "x": {
                    "field": "horsepower",
                    "type": "quantitative"
                },
                "y": {
                    "field": "acceleration",
                    "type": "quantitative"
                },
                "row": {
                    "field": "origin",
                    "type": "nominal"
                }
            },
            "config": {
                "line": {
                    "point": true
                },
                "scale": {
                    "useUnaggregatedDomain": true
                }
            },
            "data": {
                "url": "cars.json"
            }
        },
        "sol": {
            "violations": {
                "nominal_row": [
                    {
                        "description": "Nominal on row channel.",
                        "type": "soft",
                        "name": "nominal_row",
                        "asp": "soft(nominal_row,E) :- channel(E,row), type(E,nominal).",
                        "weight": 7,
                        "witness": "soft(nominal_row,e2)"
                    }
                ],
                "type_n": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_n",
                        "asp": "soft(type_n,E) :- type(E,nominal).",
                        "weight": 2,
                        "witness": "soft(type_n,e2)"
                    }
                ],
                "type_q": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_q",
                        "asp": "soft(type_q,E) :- type(E,quantitative).",
                        "weight": 0,
                        "witness": "soft(type_q,e0)"
                    },
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_q",
                        "asp": "soft(type_q,E) :- type(E,quantitative).",
                        "weight": 0,
                        "witness": "soft(type_q,e1)"
                    }
                ],
                "encoding_field": [
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e0)"
                    },
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e1)"
                    },
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e2)"
                    }
                ],
                "encoding": [
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e0)"
                    },
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e1)"
                    },
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e2)"
                    }
                ],
                "y_row": [
                    {
                        "description": "Positional interactions as suggested by Kim et al.",
                        "type": "soft",
                        "name": "y_row",
                        "asp": "soft(y_row) :- channel(_,y), channel(_,row).",
                        "weight": 1,
                        "witness": "soft(y_row,_placeholder)"
                    }
                ],
                "x_row": [
                    {
                        "description": "Positional interactions as suggested by Kim et al.",
                        "type": "soft",
                        "name": "x_row",
                        "asp": "soft(x_row) :- channel(_,x), channel(_,row).",
                        "weight": 1,
                        "witness": "soft(x_row,_placeholder)"
                    }
                ],
                "continuous_y": [
                    {
                        "description": "Continuous on y channel.",
                        "type": "soft",
                        "name": "continuous_y",
                        "asp": "soft(continuous_y,E) :- channel(E,y), continuous(E).",
                        "weight": 0,
                        "witness": "soft(continuous_y,e1)"
                    }
                ],
                "continuous_x": [
                    {
                        "description": "Continuous on x channel.",
                        "type": "soft",
                        "name": "continuous_x",
                        "asp": "soft(continuous_x,E) :- channel(E,x), continuous(E).",
                        "weight": 0,
                        "witness": "soft(continuous_x,e0)"
                    }
                ],
                "c_c_point": [
                    {
                        "description": "Continuous by continuous for point mark.",
                        "type": "soft",
                        "name": "c_c_point",
                        "asp": "soft(c_c_point) :- is_c_c, mark(point).",
                        "weight": 0,
                        "witness": "soft(c_c_point,_placeholder)"
                    }
                ]
            },
            "facts": [
                "data(\"cars.json\")",
                "mark(point)",
                "zero(e0)",
                "zero(e1)",
                "channel(e0,x)",
                "channel(e1,y)",
                "channel(e2,row)",
                "field(e0,\"horsepower\")",
                "field(e1,\"acceleration\")",
                "field(e2,\"origin\")",
                "soft(nominal_row,e2)",
                "soft(type_n,e2)",
                "soft(type_q,e0)",
                "soft(type_q,e1)",
                "soft(encoding_field,e0)",
                "soft(encoding_field,e1)",
                "soft(encoding_field,e2)",
                "soft(encoding,e0)",
                "soft(encoding,e1)",
                "soft(encoding,e2)",
                "soft(y_row,_placeholder)",
                "soft(x_row,_placeholder)",
                "type(e0,quantitative)",
                "type(e1,quantitative)",
                "type(e2,nominal)",
                "soft(continuous_y,e1)",
                "soft(continuous_x,e0)",
                "soft(c_c_point,_placeholder)"
            ]
        }
    },
    "119": {
        "type": "chart",
        "id": "119",
        "comparator": "<",
        "vlSpec": {
            "mark": "point",
            "encoding": {
                "x": {
                    "field": "horsepower",
                    "type": "quantitative"
                },
                "y": {
                    "field": "acceleration",
                    "type": "quantitative"
                },
                "column": {
                    "field": "origin",
                    "type": "nominal"
                }
            },
            "config": {
                "line": {
                    "point": true
                },
                "scale": {
                    "useUnaggregatedDomain": true
                }
            },
            "data": {
                "url": "cars.json"
            }
        },
        "sol": {
            "violations": {
                "nominal_column": [
                    {
                        "description": "Nominal on column channel.",
                        "type": "soft",
                        "name": "nominal_column",
                        "asp": "soft(nominal_column,E) :- channel(E,column), type(E,nominal).",
                        "weight": 10,
                        "witness": "soft(nominal_column,e2)"
                    }
                ],
                "type_n": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_n",
                        "asp": "soft(type_n,E) :- type(E,nominal).",
                        "weight": 2,
                        "witness": "soft(type_n,e2)"
                    }
                ],
                "type_q": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_q",
                        "asp": "soft(type_q,E) :- type(E,quantitative).",
                        "weight": 0,
                        "witness": "soft(type_q,e0)"
                    },
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_q",
                        "asp": "soft(type_q,E) :- type(E,quantitative).",
                        "weight": 0,
                        "witness": "soft(type_q,e1)"
                    }
                ],
                "encoding_field": [
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e0)"
                    },
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e1)"
                    },
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e2)"
                    }
                ],
                "encoding": [
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e0)"
                    },
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e1)"
                    },
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e2)"
                    }
                ],
                "y_column": [
                    {
                        "description": "Positional interactions as suggested by Kim et al.",
                        "type": "soft",
                        "name": "y_column",
                        "asp": "soft(y_column) :- channel(_,y), channel(_,column).",
                        "weight": 1,
                        "witness": "soft(y_column,_placeholder)"
                    }
                ],
                "x_column": [
                    {
                        "description": "Positional interactions as suggested by Kim et al.",
                        "type": "soft",
                        "name": "x_column",
                        "asp": "soft(x_column) :- channel(_,x), channel(_,column).",
                        "weight": 1,
                        "witness": "soft(x_column,_placeholder)"
                    }
                ],
                "continuous_y": [
                    {
                        "description": "Continuous on y channel.",
                        "type": "soft",
                        "name": "continuous_y",
                        "asp": "soft(continuous_y,E) :- channel(E,y), continuous(E).",
                        "weight": 0,
                        "witness": "soft(continuous_y,e1)"
                    }
                ],
                "continuous_x": [
                    {
                        "description": "Continuous on x channel.",
                        "type": "soft",
                        "name": "continuous_x",
                        "asp": "soft(continuous_x,E) :- channel(E,x), continuous(E).",
                        "weight": 0,
                        "witness": "soft(continuous_x,e0)"
                    }
                ],
                "c_c_point": [
                    {
                        "description": "Continuous by continuous for point mark.",
                        "type": "soft",
                        "name": "c_c_point",
                        "asp": "soft(c_c_point) :- is_c_c, mark(point).",
                        "weight": 0,
                        "witness": "soft(c_c_point,_placeholder)"
                    }
                ]
            },
            "facts": [
                "data(\"cars.json\")",
                "mark(point)",
                "zero(e0)",
                "zero(e1)",
                "channel(e0,x)",
                "channel(e1,y)",
                "channel(e2,column)",
                "field(e0,\"horsepower\")",
                "field(e1,\"acceleration\")",
                "field(e2,\"origin\")",
                "soft(nominal_column,e2)",
                "soft(type_n,e2)",
                "soft(type_q,e0)",
                "soft(type_q,e1)",
                "soft(encoding_field,e0)",
                "soft(encoding_field,e1)",
                "soft(encoding_field,e2)",
                "soft(encoding,e0)",
                "soft(encoding,e1)",
                "soft(encoding,e2)",
                "soft(y_column,_placeholder)",
                "soft(x_column,_placeholder)",
                "type(e0,quantitative)",
                "type(e1,quantitative)",
                "type(e2,nominal)",
                "soft(continuous_y,e1)",
                "soft(continuous_x,e0)",
                "soft(c_c_point,_placeholder)"
            ]
        }
    },
    "121": {
        "type": "chart",
        "id": "121",
        "comparator": "<",
        "vlSpec": {
            "mark": "tick",
            "encoding": {
                "x": {
                    "field": "horsepower",
                    "type": "quantitative"
                },
                "color": {
                    "field": "acceleration",
                    "type": "quantitative"
                },
                "y": {
                    "field": "origin",
                    "type": "nominal"
                }
            },
            "config": {
                "line": {
                    "point": true
                },
                "scale": {
                    "useUnaggregatedDomain": true
                }
            },
            "data": {
                "url": "cars.json"
            }
        },
        "sol": {
            "violations": {
                "nominal_y": [
                    {
                        "description": "Nominal on y channel.",
                        "type": "soft",
                        "name": "nominal_y",
                        "asp": "soft(nominal_y,E) :- channel(E,y), type(E,nominal).",
                        "weight": 0,
                        "witness": "soft(nominal_y,e2)"
                    }
                ],
                "type_n": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_n",
                        "asp": "soft(type_n,E) :- type(E,nominal).",
                        "weight": 2,
                        "witness": "soft(type_n,e2)"
                    }
                ],
                "type_q": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_q",
                        "asp": "soft(type_q,E) :- type(E,quantitative).",
                        "weight": 0,
                        "witness": "soft(type_q,e0)"
                    },
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_q",
                        "asp": "soft(type_q,E) :- type(E,quantitative).",
                        "weight": 0,
                        "witness": "soft(type_q,e1)"
                    }
                ],
                "encoding_field": [
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e0)"
                    },
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e1)"
                    },
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e2)"
                    }
                ],
                "encoding": [
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e0)"
                    },
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e1)"
                    },
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e2)"
                    }
                ],
                "continuous_color": [
                    {
                        "description": "Continuous on color channel.",
                        "type": "soft",
                        "name": "continuous_color",
                        "asp": "soft(continuous_color,E) :- channel(E,color), continuous(E).",
                        "weight": 10,
                        "witness": "soft(continuous_color,e1)"
                    }
                ],
                "continuous_x": [
                    {
                        "description": "Continuous on x channel.",
                        "type": "soft",
                        "name": "continuous_x",
                        "asp": "soft(continuous_x,E) :- channel(E,x), continuous(E).",
                        "weight": 0,
                        "witness": "soft(continuous_x,e0)"
                    }
                ],
                "c_d_tick": [
                    {
                        "description": "Continuous by discrete for tick mark.",
                        "type": "soft",
                        "name": "c_d_tick",
                        "asp": "soft(c_d_tick) :- is_c_d, not no_overlap, mark(tick).",
                        "weight": 0,
                        "witness": "soft(c_d_tick,_placeholder)"
                    }
                ]
            },
            "facts": [
                "data(\"cars.json\")",
                "mark(tick)",
                "zero(e0)",
                "zero(e1)",
                "channel(e0,x)",
                "channel(e1,color)",
                "channel(e2,y)",
                "field(e0,\"horsepower\")",
                "field(e1,\"acceleration\")",
                "field(e2,\"origin\")",
                "soft(nominal_y,e2)",
                "soft(type_n,e2)",
                "soft(type_q,e0)",
                "soft(type_q,e1)",
                "soft(encoding_field,e0)",
                "soft(encoding_field,e1)",
                "soft(encoding_field,e2)",
                "soft(encoding,e0)",
                "soft(encoding,e1)",
                "soft(encoding,e2)",
                "type(e0,quantitative)",
                "type(e1,quantitative)",
                "type(e2,nominal)",
                "soft(continuous_color,e1)",
                "soft(continuous_x,e0)",
                "soft(c_d_tick,_placeholder)"
            ]
        }
    },
    "125": {
        "type": "chart",
        "id": "125",
        "comparator": "<",
        "vlSpec": {
            "mark": "point",
            "encoding": {
                "x": {
                    "field": "horsepower",
                    "type": "quantitative"
                },
                "color": {
                    "field": "acceleration",
                    "type": "quantitative"
                },
                "y": {
                    "field": "origin",
                    "type": "nominal"
                }
            },
            "config": {
                "line": {
                    "point": true
                },
                "scale": {
                    "useUnaggregatedDomain": true
                }
            },
            "data": {
                "url": "cars.json"
            }
        },
        "sol": {
            "violations": {
                "nominal_y": [
                    {
                        "description": "Nominal on y channel.",
                        "type": "soft",
                        "name": "nominal_y",
                        "asp": "soft(nominal_y,E) :- channel(E,y), type(E,nominal).",
                        "weight": 0,
                        "witness": "soft(nominal_y,e2)"
                    }
                ],
                "type_n": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_n",
                        "asp": "soft(type_n,E) :- type(E,nominal).",
                        "weight": 2,
                        "witness": "soft(type_n,e2)"
                    }
                ],
                "type_q": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_q",
                        "asp": "soft(type_q,E) :- type(E,quantitative).",
                        "weight": 0,
                        "witness": "soft(type_q,e0)"
                    },
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_q",
                        "asp": "soft(type_q,E) :- type(E,quantitative).",
                        "weight": 0,
                        "witness": "soft(type_q,e1)"
                    }
                ],
                "encoding_field": [
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e0)"
                    },
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e1)"
                    },
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e2)"
                    }
                ],
                "encoding": [
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e0)"
                    },
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e1)"
                    },
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e2)"
                    }
                ],
                "continuous_color": [
                    {
                        "description": "Continuous on color channel.",
                        "type": "soft",
                        "name": "continuous_color",
                        "asp": "soft(continuous_color,E) :- channel(E,color), continuous(E).",
                        "weight": 10,
                        "witness": "soft(continuous_color,e1)"
                    }
                ],
                "continuous_x": [
                    {
                        "description": "Continuous on x channel.",
                        "type": "soft",
                        "name": "continuous_x",
                        "asp": "soft(continuous_x,E) :- channel(E,x), continuous(E).",
                        "weight": 0,
                        "witness": "soft(continuous_x,e0)"
                    }
                ],
                "c_d_point": [
                    {
                        "description": "Continuous by discrete for point mark.",
                        "type": "soft",
                        "name": "c_d_point",
                        "asp": "soft(c_d_point) :- is_c_d, not no_overlap, mark(point).",
                        "weight": 10,
                        "witness": "soft(c_d_point,_placeholder)"
                    }
                ]
            },
            "facts": [
                "data(\"cars.json\")",
                "mark(point)",
                "zero(e0)",
                "zero(e1)",
                "channel(e0,x)",
                "channel(e1,color)",
                "channel(e2,y)",
                "field(e0,\"horsepower\")",
                "field(e1,\"acceleration\")",
                "field(e2,\"origin\")",
                "soft(nominal_y,e2)",
                "soft(type_n,e2)",
                "soft(type_q,e0)",
                "soft(type_q,e1)",
                "soft(encoding_field,e0)",
                "soft(encoding_field,e1)",
                "soft(encoding_field,e2)",
                "soft(encoding,e0)",
                "soft(encoding,e1)",
                "soft(encoding,e2)",
                "type(e0,quantitative)",
                "type(e1,quantitative)",
                "type(e2,nominal)",
                "soft(continuous_color,e1)",
                "soft(continuous_x,e0)",
                "soft(c_d_point,_placeholder)"
            ]
        }
    },
    "128": {
        "type": "chart",
        "id": "128",
        "comparator": "<",
        "vlSpec": {
            "mark": "point",
            "encoding": {
                "x": {
                    "field": "horsepower",
                    "type": "quantitative"
                },
                "y": {
                    "field": "acceleration",
                    "type": "quantitative"
                },
                "color": {
                    "field": "cylinders",
                    "type": "ordinal"
                }
            },
            "config": {
                "line": {
                    "point": true
                },
                "scale": {
                    "useUnaggregatedDomain": true
                }
            },
            "data": {
                "url": "cars.json"
            }
        },
        "sol": {
            "violations": {
                "type_o": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_o",
                        "asp": "soft(type_o,E) :- type(E,ordinal).",
                        "weight": 1,
                        "witness": "soft(type_o,e2)"
                    }
                ],
                "type_q": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_q",
                        "asp": "soft(type_q,E) :- type(E,quantitative).",
                        "weight": 0,
                        "witness": "soft(type_q,e0)"
                    },
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_q",
                        "asp": "soft(type_q,E) :- type(E,quantitative).",
                        "weight": 0,
                        "witness": "soft(type_q,e1)"
                    }
                ],
                "encoding_field": [
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e0)"
                    },
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e1)"
                    },
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e2)"
                    }
                ],
                "encoding": [
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e0)"
                    },
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e1)"
                    },
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e2)"
                    }
                ],
                "continuous_y": [
                    {
                        "description": "Continuous on y channel.",
                        "type": "soft",
                        "name": "continuous_y",
                        "asp": "soft(continuous_y,E) :- channel(E,y), continuous(E).",
                        "weight": 0,
                        "witness": "soft(continuous_y,e1)"
                    }
                ],
                "continuous_x": [
                    {
                        "description": "Continuous on x channel.",
                        "type": "soft",
                        "name": "continuous_x",
                        "asp": "soft(continuous_x,E) :- channel(E,x), continuous(E).",
                        "weight": 0,
                        "witness": "soft(continuous_x,e0)"
                    }
                ],
                "c_c_point": [
                    {
                        "description": "Continuous by continuous for point mark.",
                        "type": "soft",
                        "name": "c_c_point",
                        "asp": "soft(c_c_point) :- is_c_c, mark(point).",
                        "weight": 0,
                        "witness": "soft(c_c_point,_placeholder)"
                    }
                ],
                "ordered_color": [
                    {
                        "description": "Ordered on color channel.",
                        "type": "soft",
                        "name": "ordered_color",
                        "asp": "soft(ordered_color,E) :- channel(E,color), discrete(E), not type(E,nominal).",
                        "weight": 8,
                        "witness": "soft(ordered_color,e2)"
                    }
                ]
            },
            "facts": [
                "data(\"cars.json\")",
                "mark(point)",
                "zero(e0)",
                "zero(e1)",
                "channel(e0,x)",
                "channel(e1,y)",
                "channel(e2,color)",
                "field(e0,\"horsepower\")",
                "field(e1,\"acceleration\")",
                "field(e2,\"cylinders\")",
                "soft(type_o,e2)",
                "soft(type_q,e0)",
                "soft(type_q,e1)",
                "soft(encoding_field,e0)",
                "soft(encoding_field,e1)",
                "soft(encoding_field,e2)",
                "soft(encoding,e0)",
                "soft(encoding,e1)",
                "soft(encoding,e2)",
                "type(e0,quantitative)",
                "type(e1,quantitative)",
                "type(e2,ordinal)",
                "soft(continuous_y,e1)",
                "soft(continuous_x,e0)",
                "soft(c_c_point,_placeholder)",
                "soft(ordered_color,e2)"
            ]
        }
    },
    "129": {
        "type": "chart",
        "id": "129",
        "comparator": "<",
        "vlSpec": {
            "mark": "point",
            "encoding": {
                "x": {
                    "field": "horsepower",
                    "type": "quantitative"
                },
                "y": {
                    "field": "acceleration",
                    "type": "quantitative"
                },
                "row": {
                    "field": "cylinders",
                    "type": "ordinal"
                }
            },
            "config": {
                "line": {
                    "point": true
                },
                "scale": {
                    "useUnaggregatedDomain": true
                }
            },
            "data": {
                "url": "cars.json"
            }
        },
        "sol": {
            "violations": {
                "type_o": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_o",
                        "asp": "soft(type_o,E) :- type(E,ordinal).",
                        "weight": 1,
                        "witness": "soft(type_o,e2)"
                    }
                ],
                "type_q": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_q",
                        "asp": "soft(type_q,E) :- type(E,quantitative).",
                        "weight": 0,
                        "witness": "soft(type_q,e0)"
                    },
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_q",
                        "asp": "soft(type_q,E) :- type(E,quantitative).",
                        "weight": 0,
                        "witness": "soft(type_q,e1)"
                    }
                ],
                "encoding_field": [
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e0)"
                    },
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e1)"
                    },
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e2)"
                    }
                ],
                "encoding": [
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e0)"
                    },
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e1)"
                    },
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e2)"
                    }
                ],
                "y_row": [
                    {
                        "description": "Positional interactions as suggested by Kim et al.",
                        "type": "soft",
                        "name": "y_row",
                        "asp": "soft(y_row) :- channel(_,y), channel(_,row).",
                        "weight": 1,
                        "witness": "soft(y_row,_placeholder)"
                    }
                ],
                "x_row": [
                    {
                        "description": "Positional interactions as suggested by Kim et al.",
                        "type": "soft",
                        "name": "x_row",
                        "asp": "soft(x_row) :- channel(_,x), channel(_,row).",
                        "weight": 1,
                        "witness": "soft(x_row,_placeholder)"
                    }
                ],
                "continuous_y": [
                    {
                        "description": "Continuous on y channel.",
                        "type": "soft",
                        "name": "continuous_y",
                        "asp": "soft(continuous_y,E) :- channel(E,y), continuous(E).",
                        "weight": 0,
                        "witness": "soft(continuous_y,e1)"
                    }
                ],
                "continuous_x": [
                    {
                        "description": "Continuous on x channel.",
                        "type": "soft",
                        "name": "continuous_x",
                        "asp": "soft(continuous_x,E) :- channel(E,x), continuous(E).",
                        "weight": 0,
                        "witness": "soft(continuous_x,e0)"
                    }
                ],
                "c_c_point": [
                    {
                        "description": "Continuous by continuous for point mark.",
                        "type": "soft",
                        "name": "c_c_point",
                        "asp": "soft(c_c_point) :- is_c_c, mark(point).",
                        "weight": 0,
                        "witness": "soft(c_c_point,_placeholder)"
                    }
                ],
                "ordered_row": [
                    {
                        "description": "Ordered on row channel.",
                        "type": "soft",
                        "name": "ordered_row",
                        "asp": "soft(ordered_row,E) :- channel(E,row), discrete(E), not type(E,nominal).",
                        "weight": 10,
                        "witness": "soft(ordered_row,e2)"
                    }
                ]
            },
            "facts": [
                "data(\"cars.json\")",
                "mark(point)",
                "zero(e0)",
                "zero(e1)",
                "channel(e0,x)",
                "channel(e1,y)",
                "channel(e2,row)",
                "field(e0,\"horsepower\")",
                "field(e1,\"acceleration\")",
                "field(e2,\"cylinders\")",
                "soft(type_o,e2)",
                "soft(type_q,e0)",
                "soft(type_q,e1)",
                "soft(encoding_field,e0)",
                "soft(encoding_field,e1)",
                "soft(encoding_field,e2)",
                "soft(encoding,e0)",
                "soft(encoding,e1)",
                "soft(encoding,e2)",
                "soft(y_row,_placeholder)",
                "soft(x_row,_placeholder)",
                "type(e0,quantitative)",
                "type(e1,quantitative)",
                "type(e2,ordinal)",
                "soft(continuous_y,e1)",
                "soft(continuous_x,e0)",
                "soft(c_c_point,_placeholder)",
                "soft(ordered_row,e2)"
            ]
        }
    },
    "131": {
        "type": "chart",
        "id": "131",
        "comparator": "<",
        "vlSpec": {
            "mark": "point",
            "encoding": {
                "x": {
                    "field": "horsepower",
                    "type": "quantitative"
                },
                "y": {
                    "field": "acceleration",
                    "type": "quantitative"
                },
                "column": {
                    "field": "cylinders",
                    "type": "ordinal"
                }
            },
            "config": {
                "line": {
                    "point": true
                },
                "scale": {
                    "useUnaggregatedDomain": true
                }
            },
            "data": {
                "url": "cars.json"
            }
        },
        "sol": {
            "violations": {
                "type_o": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_o",
                        "asp": "soft(type_o,E) :- type(E,ordinal).",
                        "weight": 1,
                        "witness": "soft(type_o,e2)"
                    }
                ],
                "type_q": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_q",
                        "asp": "soft(type_q,E) :- type(E,quantitative).",
                        "weight": 0,
                        "witness": "soft(type_q,e0)"
                    },
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_q",
                        "asp": "soft(type_q,E) :- type(E,quantitative).",
                        "weight": 0,
                        "witness": "soft(type_q,e1)"
                    }
                ],
                "encoding_field": [
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e0)"
                    },
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e1)"
                    },
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e2)"
                    }
                ],
                "encoding": [
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e0)"
                    },
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e1)"
                    },
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e2)"
                    }
                ],
                "y_column": [
                    {
                        "description": "Positional interactions as suggested by Kim et al.",
                        "type": "soft",
                        "name": "y_column",
                        "asp": "soft(y_column) :- channel(_,y), channel(_,column).",
                        "weight": 1,
                        "witness": "soft(y_column,_placeholder)"
                    }
                ],
                "x_column": [
                    {
                        "description": "Positional interactions as suggested by Kim et al.",
                        "type": "soft",
                        "name": "x_column",
                        "asp": "soft(x_column) :- channel(_,x), channel(_,column).",
                        "weight": 1,
                        "witness": "soft(x_column,_placeholder)"
                    }
                ],
                "continuous_y": [
                    {
                        "description": "Continuous on y channel.",
                        "type": "soft",
                        "name": "continuous_y",
                        "asp": "soft(continuous_y,E) :- channel(E,y), continuous(E).",
                        "weight": 0,
                        "witness": "soft(continuous_y,e1)"
                    }
                ],
                "continuous_x": [
                    {
                        "description": "Continuous on x channel.",
                        "type": "soft",
                        "name": "continuous_x",
                        "asp": "soft(continuous_x,E) :- channel(E,x), continuous(E).",
                        "weight": 0,
                        "witness": "soft(continuous_x,e0)"
                    }
                ],
                "c_c_point": [
                    {
                        "description": "Continuous by continuous for point mark.",
                        "type": "soft",
                        "name": "c_c_point",
                        "asp": "soft(c_c_point) :- is_c_c, mark(point).",
                        "weight": 0,
                        "witness": "soft(c_c_point,_placeholder)"
                    }
                ],
                "ordered_column": [
                    {
                        "description": "Ordered on column channel.",
                        "type": "soft",
                        "name": "ordered_column",
                        "asp": "soft(ordered_column,E) :- channel(E,column), discrete(E), not type(E,nominal).",
                        "weight": 10,
                        "witness": "soft(ordered_column,e2)"
                    }
                ]
            },
            "facts": [
                "data(\"cars.json\")",
                "mark(point)",
                "zero(e0)",
                "zero(e1)",
                "channel(e0,x)",
                "channel(e1,y)",
                "channel(e2,column)",
                "field(e0,\"horsepower\")",
                "field(e1,\"acceleration\")",
                "field(e2,\"cylinders\")",
                "soft(type_o,e2)",
                "soft(type_q,e0)",
                "soft(type_q,e1)",
                "soft(encoding_field,e0)",
                "soft(encoding_field,e1)",
                "soft(encoding_field,e2)",
                "soft(encoding,e0)",
                "soft(encoding,e1)",
                "soft(encoding,e2)",
                "soft(y_column,_placeholder)",
                "soft(x_column,_placeholder)",
                "type(e0,quantitative)",
                "type(e1,quantitative)",
                "type(e2,ordinal)",
                "soft(continuous_y,e1)",
                "soft(continuous_x,e0)",
                "soft(c_c_point,_placeholder)",
                "soft(ordered_column,e2)"
            ]
        }
    },
    "133": {
        "type": "chart",
        "id": "133",
        "comparator": "<",
        "vlSpec": {
            "mark": "point",
            "encoding": {
                "x": {
                    "field": "horsepower",
                    "type": "quantitative"
                },
                "size": {
                    "field": "acceleration",
                    "type": "quantitative"
                },
                "y": {
                    "field": "cylinders",
                    "type": "ordinal"
                }
            },
            "config": {
                "line": {
                    "point": true
                },
                "scale": {
                    "useUnaggregatedDomain": true
                }
            },
            "data": {
                "url": "cars.json"
            }
        },
        "sol": {
            "violations": {
                "type_o": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_o",
                        "asp": "soft(type_o,E) :- type(E,ordinal).",
                        "weight": 1,
                        "witness": "soft(type_o,e2)"
                    }
                ],
                "type_q": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_q",
                        "asp": "soft(type_q,E) :- type(E,quantitative).",
                        "weight": 0,
                        "witness": "soft(type_q,e0)"
                    },
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_q",
                        "asp": "soft(type_q,E) :- type(E,quantitative).",
                        "weight": 0,
                        "witness": "soft(type_q,e1)"
                    }
                ],
                "encoding_field": [
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e0)"
                    },
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e1)"
                    },
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e2)"
                    }
                ],
                "encoding": [
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e0)"
                    },
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e1)"
                    },
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e2)"
                    }
                ],
                "continuous_size": [
                    {
                        "description": "Continuous on size channel.",
                        "type": "soft",
                        "name": "continuous_size",
                        "asp": "soft(continuous_size,E) :- channel(E,size), continuous(E).",
                        "weight": 1,
                        "witness": "soft(continuous_size,e1)"
                    }
                ],
                "continuous_x": [
                    {
                        "description": "Continuous on x channel.",
                        "type": "soft",
                        "name": "continuous_x",
                        "asp": "soft(continuous_x,E) :- channel(E,x), continuous(E).",
                        "weight": 0,
                        "witness": "soft(continuous_x,e0)"
                    }
                ],
                "ordered_y": [
                    {
                        "description": "Ordered on y channel.",
                        "type": "soft",
                        "name": "ordered_y",
                        "asp": "soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).",
                        "weight": 0,
                        "witness": "soft(ordered_y,e2)"
                    }
                ],
                "c_d_point": [
                    {
                        "description": "Continuous by discrete for point mark.",
                        "type": "soft",
                        "name": "c_d_point",
                        "asp": "soft(c_d_point) :- is_c_d, not no_overlap, mark(point).",
                        "weight": 10,
                        "witness": "soft(c_d_point,_placeholder)"
                    }
                ]
            },
            "facts": [
                "data(\"cars.json\")",
                "mark(point)",
                "zero(e0)",
                "zero(e1)",
                "channel(e0,x)",
                "channel(e1,size)",
                "channel(e2,y)",
                "field(e0,\"horsepower\")",
                "field(e1,\"acceleration\")",
                "field(e2,\"cylinders\")",
                "soft(type_o,e2)",
                "soft(type_q,e0)",
                "soft(type_q,e1)",
                "soft(encoding_field,e0)",
                "soft(encoding_field,e1)",
                "soft(encoding_field,e2)",
                "soft(encoding,e0)",
                "soft(encoding,e1)",
                "soft(encoding,e2)",
                "type(e0,quantitative)",
                "type(e1,quantitative)",
                "type(e2,ordinal)",
                "soft(continuous_size,e1)",
                "soft(continuous_x,e0)",
                "soft(ordered_y,e2)",
                "soft(c_d_point,_placeholder)"
            ]
        }
    },
    "136": {
        "type": "chart",
        "id": "136",
        "comparator": "<",
        "vlSpec": {
            "mark": "point",
            "encoding": {
                "x": {
                    "aggregate": "count",
                    "type": "quantitative"
                },
                "y": {
                    "field": "origin",
                    "type": "nominal"
                }
            },
            "config": {
                "line": {
                    "point": true
                },
                "scale": {
                    "useUnaggregatedDomain": true
                }
            },
            "data": {
                "url": "cars.json"
            }
        },
        "sol": {
            "violations": {
                "aggregate_count": [
                    {
                        "description": "Count as aggregate op.",
                        "type": "soft",
                        "name": "aggregate_count",
                        "asp": "soft(aggregate_count,E) :- aggregate(E,count).",
                        "weight": 0,
                        "witness": "soft(aggregate_count,e0)"
                    }
                ],
                "nominal_y": [
                    {
                        "description": "Nominal on y channel.",
                        "type": "soft",
                        "name": "nominal_y",
                        "asp": "soft(nominal_y,E) :- channel(E,y), type(E,nominal).",
                        "weight": 0,
                        "witness": "soft(nominal_y,e1)"
                    }
                ],
                "type_n": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_n",
                        "asp": "soft(type_n,E) :- type(E,nominal).",
                        "weight": 2,
                        "witness": "soft(type_n,e1)"
                    }
                ],
                "type_q": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_q",
                        "asp": "soft(type_q,E) :- type(E,quantitative).",
                        "weight": 0,
                        "witness": "soft(type_q,e0)"
                    }
                ],
                "encoding_field": [
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e1)"
                    }
                ],
                "encoding": [
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e0)"
                    },
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e1)"
                    }
                ],
                "aggregate": [
                    {
                        "description": "Prefer to use raw (no aggregate).",
                        "type": "soft",
                        "name": "aggregate",
                        "asp": "soft(aggregate,E) :- aggregate(E,_).",
                        "weight": 1,
                        "witness": "soft(aggregate,e0)"
                    }
                ],
                "continuous_x": [
                    {
                        "description": "Continuous on x channel.",
                        "type": "soft",
                        "name": "continuous_x",
                        "asp": "soft(continuous_x,E) :- channel(E,x), continuous(E).",
                        "weight": 0,
                        "witness": "soft(continuous_x,e0)"
                    }
                ],
                "c_d_no_overlap_point": [
                    {
                        "description": "Continuous by discrete for point mark with no overlap.",
                        "type": "soft",
                        "name": "c_d_no_overlap_point",
                        "asp": "soft(c_d_no_overlap_point) :- is_c_d, no_overlap, mark(point).",
                        "weight": 20,
                        "witness": "soft(c_d_no_overlap_point,_placeholder)"
                    }
                ]
            },
            "facts": [
                "data(\"cars.json\")",
                "mark(point)",
                "zero(e0)",
                "aggregate(e0,count)",
                "channel(e0,x)",
                "channel(e1,y)",
                "field(e1,\"origin\")",
                "soft(aggregate_count,e0)",
                "soft(nominal_y,e1)",
                "soft(type_n,e1)",
                "soft(type_q,e0)",
                "soft(encoding_field,e1)",
                "soft(encoding,e0)",
                "soft(encoding,e1)",
                "soft(aggregate,e0)",
                "type(e0,quantitative)",
                "type(e1,nominal)",
                "soft(continuous_x,e0)",
                "soft(c_d_no_overlap_point,_placeholder)"
            ]
        }
    },
    "137": {
        "type": "chart",
        "id": "137",
        "comparator": "<",
        "vlSpec": {
            "mark": "point",
            "encoding": {
                "y": {
                    "aggregate": "count",
                    "type": "quantitative"
                },
                "x": {
                    "field": "origin",
                    "type": "nominal"
                }
            },
            "config": {
                "line": {
                    "point": true
                },
                "scale": {
                    "useUnaggregatedDomain": true
                }
            },
            "data": {
                "url": "cars.json"
            }
        },
        "sol": {
            "violations": {
                "aggregate_count": [
                    {
                        "description": "Count as aggregate op.",
                        "type": "soft",
                        "name": "aggregate_count",
                        "asp": "soft(aggregate_count,E) :- aggregate(E,count).",
                        "weight": 0,
                        "witness": "soft(aggregate_count,e0)"
                    }
                ],
                "nominal_x": [
                    {
                        "description": "Nominal on x channel.",
                        "type": "soft",
                        "name": "nominal_x",
                        "asp": "soft(nominal_x,E) :- channel(E,x), type(E,nominal).",
                        "weight": 3,
                        "witness": "soft(nominal_x,e1)"
                    }
                ],
                "type_n": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_n",
                        "asp": "soft(type_n,E) :- type(E,nominal).",
                        "weight": 2,
                        "witness": "soft(type_n,e1)"
                    }
                ],
                "type_q": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_q",
                        "asp": "soft(type_q,E) :- type(E,quantitative).",
                        "weight": 0,
                        "witness": "soft(type_q,e0)"
                    }
                ],
                "encoding_field": [
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e1)"
                    }
                ],
                "encoding": [
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e0)"
                    },
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e1)"
                    }
                ],
                "aggregate": [
                    {
                        "description": "Prefer to use raw (no aggregate).",
                        "type": "soft",
                        "name": "aggregate",
                        "asp": "soft(aggregate,E) :- aggregate(E,_).",
                        "weight": 1,
                        "witness": "soft(aggregate,e0)"
                    }
                ],
                "continuous_y": [
                    {
                        "description": "Continuous on y channel.",
                        "type": "soft",
                        "name": "continuous_y",
                        "asp": "soft(continuous_y,E) :- channel(E,y), continuous(E).",
                        "weight": 0,
                        "witness": "soft(continuous_y,e0)"
                    }
                ],
                "c_d_no_overlap_point": [
                    {
                        "description": "Continuous by discrete for point mark with no overlap.",
                        "type": "soft",
                        "name": "c_d_no_overlap_point",
                        "asp": "soft(c_d_no_overlap_point) :- is_c_d, no_overlap, mark(point).",
                        "weight": 20,
                        "witness": "soft(c_d_no_overlap_point,_placeholder)"
                    }
                ]
            },
            "facts": [
                "data(\"cars.json\")",
                "mark(point)",
                "zero(e0)",
                "aggregate(e0,count)",
                "channel(e0,y)",
                "channel(e1,x)",
                "field(e1,\"origin\")",
                "soft(aggregate_count,e0)",
                "soft(nominal_x,e1)",
                "soft(type_n,e1)",
                "soft(type_q,e0)",
                "soft(encoding_field,e1)",
                "soft(encoding,e0)",
                "soft(encoding,e1)",
                "soft(aggregate,e0)",
                "type(e0,quantitative)",
                "type(e1,nominal)",
                "soft(continuous_y,e0)",
                "soft(c_d_no_overlap_point,_placeholder)"
            ]
        }
    },
    "138": {
        "type": "chart",
        "id": "138",
        "comparator": "<",
        "vlSpec": {
            "mark": "point",
            "encoding": {
                "x": {
                    "aggregate": "count",
                    "type": "quantitative"
                },
                "y": {
                    "field": "cylinders",
                    "type": "ordinal"
                }
            },
            "config": {
                "line": {
                    "point": true
                },
                "scale": {
                    "useUnaggregatedDomain": true
                }
            },
            "data": {
                "url": "cars.json"
            }
        },
        "sol": {
            "violations": {
                "aggregate_count": [
                    {
                        "description": "Count as aggregate op.",
                        "type": "soft",
                        "name": "aggregate_count",
                        "asp": "soft(aggregate_count,E) :- aggregate(E,count).",
                        "weight": 0,
                        "witness": "soft(aggregate_count,e0)"
                    }
                ],
                "type_o": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_o",
                        "asp": "soft(type_o,E) :- type(E,ordinal).",
                        "weight": 1,
                        "witness": "soft(type_o,e1)"
                    }
                ],
                "type_q": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_q",
                        "asp": "soft(type_q,E) :- type(E,quantitative).",
                        "weight": 0,
                        "witness": "soft(type_q,e0)"
                    }
                ],
                "encoding_field": [
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e1)"
                    }
                ],
                "encoding": [
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e0)"
                    },
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e1)"
                    }
                ],
                "aggregate": [
                    {
                        "description": "Prefer to use raw (no aggregate).",
                        "type": "soft",
                        "name": "aggregate",
                        "asp": "soft(aggregate,E) :- aggregate(E,_).",
                        "weight": 1,
                        "witness": "soft(aggregate,e0)"
                    }
                ],
                "continuous_x": [
                    {
                        "description": "Continuous on x channel.",
                        "type": "soft",
                        "name": "continuous_x",
                        "asp": "soft(continuous_x,E) :- channel(E,x), continuous(E).",
                        "weight": 0,
                        "witness": "soft(continuous_x,e0)"
                    }
                ],
                "ordered_y": [
                    {
                        "description": "Ordered on y channel.",
                        "type": "soft",
                        "name": "ordered_y",
                        "asp": "soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).",
                        "weight": 0,
                        "witness": "soft(ordered_y,e1)"
                    }
                ],
                "c_d_no_overlap_point": [
                    {
                        "description": "Continuous by discrete for point mark with no overlap.",
                        "type": "soft",
                        "name": "c_d_no_overlap_point",
                        "asp": "soft(c_d_no_overlap_point) :- is_c_d, no_overlap, mark(point).",
                        "weight": 20,
                        "witness": "soft(c_d_no_overlap_point,_placeholder)"
                    }
                ]
            },
            "facts": [
                "data(\"cars.json\")",
                "mark(point)",
                "zero(e0)",
                "aggregate(e0,count)",
                "channel(e0,x)",
                "channel(e1,y)",
                "field(e1,\"cylinders\")",
                "soft(aggregate_count,e0)",
                "soft(type_o,e1)",
                "soft(type_q,e0)",
                "soft(encoding_field,e1)",
                "soft(encoding,e0)",
                "soft(encoding,e1)",
                "soft(aggregate,e0)",
                "type(e0,quantitative)",
                "type(e1,ordinal)",
                "soft(continuous_x,e0)",
                "soft(ordered_y,e1)",
                "soft(c_d_no_overlap_point,_placeholder)"
            ]
        }
    },
    "139": {
        "type": "chart",
        "id": "139",
        "comparator": "<",
        "vlSpec": {
            "mark": "point",
            "encoding": {
                "y": {
                    "aggregate": "count",
                    "type": "quantitative"
                },
                "x": {
                    "field": "cylinders",
                    "type": "ordinal"
                }
            },
            "config": {
                "line": {
                    "point": true
                },
                "scale": {
                    "useUnaggregatedDomain": true
                }
            },
            "data": {
                "url": "cars.json"
            }
        },
        "sol": {
            "violations": {
                "aggregate_count": [
                    {
                        "description": "Count as aggregate op.",
                        "type": "soft",
                        "name": "aggregate_count",
                        "asp": "soft(aggregate_count,E) :- aggregate(E,count).",
                        "weight": 0,
                        "witness": "soft(aggregate_count,e0)"
                    }
                ],
                "type_o": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_o",
                        "asp": "soft(type_o,E) :- type(E,ordinal).",
                        "weight": 1,
                        "witness": "soft(type_o,e1)"
                    }
                ],
                "type_q": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_q",
                        "asp": "soft(type_q,E) :- type(E,quantitative).",
                        "weight": 0,
                        "witness": "soft(type_q,e0)"
                    }
                ],
                "encoding_field": [
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e1)"
                    }
                ],
                "encoding": [
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e0)"
                    },
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e1)"
                    }
                ],
                "aggregate": [
                    {
                        "description": "Prefer to use raw (no aggregate).",
                        "type": "soft",
                        "name": "aggregate",
                        "asp": "soft(aggregate,E) :- aggregate(E,_).",
                        "weight": 1,
                        "witness": "soft(aggregate,e0)"
                    }
                ],
                "continuous_y": [
                    {
                        "description": "Continuous on y channel.",
                        "type": "soft",
                        "name": "continuous_y",
                        "asp": "soft(continuous_y,E) :- channel(E,y), continuous(E).",
                        "weight": 0,
                        "witness": "soft(continuous_y,e0)"
                    }
                ],
                "ordered_x": [
                    {
                        "description": "Ordered on x channel.",
                        "type": "soft",
                        "name": "ordered_x",
                        "asp": "soft(ordered_x,E) :- channel(E,x), discrete(E), not type(E,nominal).",
                        "weight": 1,
                        "witness": "soft(ordered_x,e1)"
                    }
                ],
                "c_d_no_overlap_point": [
                    {
                        "description": "Continuous by discrete for point mark with no overlap.",
                        "type": "soft",
                        "name": "c_d_no_overlap_point",
                        "asp": "soft(c_d_no_overlap_point) :- is_c_d, no_overlap, mark(point).",
                        "weight": 20,
                        "witness": "soft(c_d_no_overlap_point,_placeholder)"
                    }
                ]
            },
            "facts": [
                "data(\"cars.json\")",
                "mark(point)",
                "zero(e0)",
                "aggregate(e0,count)",
                "channel(e0,y)",
                "channel(e1,x)",
                "field(e1,\"cylinders\")",
                "soft(aggregate_count,e0)",
                "soft(type_o,e1)",
                "soft(type_q,e0)",
                "soft(encoding_field,e1)",
                "soft(encoding,e0)",
                "soft(encoding,e1)",
                "soft(aggregate,e0)",
                "type(e0,quantitative)",
                "type(e1,ordinal)",
                "soft(continuous_y,e0)",
                "soft(ordered_x,e1)",
                "soft(c_d_no_overlap_point,_placeholder)"
            ]
        }
    },
    "140": {
        "type": "chart",
        "id": "140",
        "comparator": "<",
        "vlSpec": {
            "mark": "point",
            "encoding": {
                "y": {
                    "aggregate": "count",
                    "type": "quantitative"
                },
                "x": {
                    "field": "year",
                    "type": "temporal"
                }
            },
            "config": {
                "line": {
                    "point": true
                },
                "scale": {
                    "useUnaggregatedDomain": true
                }
            },
            "data": {
                "url": "cars.json"
            }
        },
        "sol": {
            "violations": {
                "aggregate_count": [
                    {
                        "description": "Count as aggregate op.",
                        "type": "soft",
                        "name": "aggregate_count",
                        "asp": "soft(aggregate_count,E) :- aggregate(E,count).",
                        "weight": 0,
                        "witness": "soft(aggregate_count,e0)"
                    }
                ],
                "type_q": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_q",
                        "asp": "soft(type_q,E) :- type(E,quantitative).",
                        "weight": 0,
                        "witness": "soft(type_q,e0)"
                    }
                ],
                "encoding_field": [
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e1)"
                    }
                ],
                "encoding": [
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e0)"
                    },
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e1)"
                    }
                ],
                "aggregate": [
                    {
                        "description": "Prefer to use raw (no aggregate).",
                        "type": "soft",
                        "name": "aggregate",
                        "asp": "soft(aggregate,E) :- aggregate(E,_).",
                        "weight": 1,
                        "witness": "soft(aggregate,e0)"
                    }
                ],
                "continuous_y": [
                    {
                        "description": "Continuous on y channel.",
                        "type": "soft",
                        "name": "continuous_y",
                        "asp": "soft(continuous_y,E) :- channel(E,y), continuous(E).",
                        "weight": 0,
                        "witness": "soft(continuous_y,e0)"
                    }
                ],
                "continuous_x": [
                    {
                        "description": "Continuous on x channel.",
                        "type": "soft",
                        "name": "continuous_x",
                        "asp": "soft(continuous_x,E) :- channel(E,x), continuous(E).",
                        "weight": 0,
                        "witness": "soft(continuous_x,e1)"
                    }
                ],
                "c_c_point": [
                    {
                        "description": "Continuous by continuous for point mark.",
                        "type": "soft",
                        "name": "c_c_point",
                        "asp": "soft(c_c_point) :- is_c_c, mark(point).",
                        "weight": 0,
                        "witness": "soft(c_c_point,_placeholder)"
                    }
                ],
                "agg_dim": [
                    {
                        "description": "Aggregate should also have a discrete encoding to group by.",
                        "type": "soft",
                        "name": "agg_dim",
                        "asp": "soft(agg_dim) :- aggregate(_,_), not discrete(_).",
                        "weight": 2,
                        "witness": "soft(agg_dim,_placeholder)"
                    }
                ],
                "zero": [
                    {
                        "description": "Prefer to include zero for continuous (binned doesn't need zero).",
                        "type": "soft",
                        "name": "zero",
                        "asp": "soft(zero,E) :- continuous(E), not zero(E).",
                        "weight": 1,
                        "witness": "soft(zero,e1)"
                    }
                ],
                "aggregate_group_by_raw": [
                    {
                        "description": "Aggregate plots should not use raw continuous as group by.",
                        "type": "soft",
                        "name": "aggregate_group_by_raw",
                        "asp": "soft(aggregate_group_by_raw,E) :- aggregate(_,_), continuous(E), not aggregate(E,_).",
                        "weight": 3,
                        "witness": "soft(aggregate_group_by_raw,e1)"
                    }
                ],
                "zero_positional": [
                    {
                        "description": "Prefer zero positional.",
                        "type": "soft",
                        "name": "zero_positional",
                        "asp": "soft(zero_positional) :- continuous(E), channel(E,(x;y)), not zero(E).",
                        "weight": 1,
                        "witness": "soft(zero_positional,_placeholder)"
                    }
                ]
            },
            "facts": [
                "data(\"cars.json\")",
                "mark(point)",
                "zero(e0)",
                "aggregate(e0,count)",
                "channel(e0,y)",
                "channel(e1,x)",
                "field(e1,\"year\")",
                "soft(aggregate_count,e0)",
                "soft(type_q,e0)",
                "soft(encoding_field,e1)",
                "soft(encoding,e0)",
                "soft(encoding,e1)",
                "soft(aggregate,e0)",
                "type(e0,quantitative)",
                "type(e1,temporal)",
                "soft(continuous_y,e0)",
                "soft(continuous_x,e1)",
                "soft(c_c_point,_placeholder)",
                "soft(agg_dim,_placeholder)",
                "soft(zero,e1)",
                "soft(aggregate_group_by_raw,e1)",
                "soft(zero_positional,_placeholder)"
            ]
        }
    },
    "141": {
        "type": "chart",
        "id": "141",
        "comparator": "<",
        "vlSpec": {
            "mark": "point",
            "encoding": {
                "x": {
                    "aggregate": "count",
                    "type": "quantitative"
                },
                "y": {
                    "field": "year",
                    "type": "temporal"
                }
            },
            "config": {
                "line": {
                    "point": true
                },
                "scale": {
                    "useUnaggregatedDomain": true
                }
            },
            "data": {
                "url": "cars.json"
            }
        },
        "sol": {
            "violations": {
                "aggregate_count": [
                    {
                        "description": "Count as aggregate op.",
                        "type": "soft",
                        "name": "aggregate_count",
                        "asp": "soft(aggregate_count,E) :- aggregate(E,count).",
                        "weight": 0,
                        "witness": "soft(aggregate_count,e0)"
                    }
                ],
                "type_q": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_q",
                        "asp": "soft(type_q,E) :- type(E,quantitative).",
                        "weight": 0,
                        "witness": "soft(type_q,e0)"
                    }
                ],
                "encoding_field": [
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e1)"
                    }
                ],
                "encoding": [
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e0)"
                    },
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e1)"
                    }
                ],
                "aggregate": [
                    {
                        "description": "Prefer to use raw (no aggregate).",
                        "type": "soft",
                        "name": "aggregate",
                        "asp": "soft(aggregate,E) :- aggregate(E,_).",
                        "weight": 1,
                        "witness": "soft(aggregate,e0)"
                    }
                ],
                "continuous_y": [
                    {
                        "description": "Continuous on y channel.",
                        "type": "soft",
                        "name": "continuous_y",
                        "asp": "soft(continuous_y,E) :- channel(E,y), continuous(E).",
                        "weight": 0,
                        "witness": "soft(continuous_y,e1)"
                    }
                ],
                "continuous_x": [
                    {
                        "description": "Continuous on x channel.",
                        "type": "soft",
                        "name": "continuous_x",
                        "asp": "soft(continuous_x,E) :- channel(E,x), continuous(E).",
                        "weight": 0,
                        "witness": "soft(continuous_x,e0)"
                    }
                ],
                "c_c_point": [
                    {
                        "description": "Continuous by continuous for point mark.",
                        "type": "soft",
                        "name": "c_c_point",
                        "asp": "soft(c_c_point) :- is_c_c, mark(point).",
                        "weight": 0,
                        "witness": "soft(c_c_point,_placeholder)"
                    }
                ],
                "agg_dim": [
                    {
                        "description": "Aggregate should also have a discrete encoding to group by.",
                        "type": "soft",
                        "name": "agg_dim",
                        "asp": "soft(agg_dim) :- aggregate(_,_), not discrete(_).",
                        "weight": 2,
                        "witness": "soft(agg_dim,_placeholder)"
                    }
                ],
                "zero": [
                    {
                        "description": "Prefer to include zero for continuous (binned doesn't need zero).",
                        "type": "soft",
                        "name": "zero",
                        "asp": "soft(zero,E) :- continuous(E), not zero(E).",
                        "weight": 1,
                        "witness": "soft(zero,e1)"
                    }
                ],
                "aggregate_group_by_raw": [
                    {
                        "description": "Aggregate plots should not use raw continuous as group by.",
                        "type": "soft",
                        "name": "aggregate_group_by_raw",
                        "asp": "soft(aggregate_group_by_raw,E) :- aggregate(_,_), continuous(E), not aggregate(E,_).",
                        "weight": 3,
                        "witness": "soft(aggregate_group_by_raw,e1)"
                    }
                ],
                "temporal_y": [
                    {
                        "description": "Prefer time on x.",
                        "type": "soft",
                        "name": "temporal_y",
                        "asp": "soft(temporal_y) :- type(E,temporal), not channel(E,x).",
                        "weight": 1,
                        "witness": "soft(temporal_y,_placeholder)"
                    }
                ],
                "zero_positional": [
                    {
                        "description": "Prefer zero positional.",
                        "type": "soft",
                        "name": "zero_positional",
                        "asp": "soft(zero_positional) :- continuous(E), channel(E,(x;y)), not zero(E).",
                        "weight": 1,
                        "witness": "soft(zero_positional,_placeholder)"
                    }
                ]
            },
            "facts": [
                "data(\"cars.json\")",
                "mark(point)",
                "zero(e0)",
                "aggregate(e0,count)",
                "channel(e0,x)",
                "channel(e1,y)",
                "field(e1,\"year\")",
                "soft(aggregate_count,e0)",
                "soft(type_q,e0)",
                "soft(encoding_field,e1)",
                "soft(encoding,e0)",
                "soft(encoding,e1)",
                "soft(aggregate,e0)",
                "type(e0,quantitative)",
                "type(e1,temporal)",
                "soft(continuous_y,e1)",
                "soft(continuous_x,e0)",
                "soft(c_c_point,_placeholder)",
                "soft(agg_dim,_placeholder)",
                "soft(zero,e1)",
                "soft(aggregate_group_by_raw,e1)",
                "soft(temporal_y,_placeholder)",
                "soft(zero_positional,_placeholder)"
            ]
        }
    },
    "142": {
        "type": "chart",
        "id": "142",
        "comparator": "<",
        "vlSpec": {
            "mark": "point",
            "encoding": {
                "y": {
                    "aggregate": "count",
                    "type": "quantitative"
                },
                "x": {
                    "bin": true,
                    "field": "horsepower",
                    "type": "quantitative"
                }
            },
            "config": {
                "line": {
                    "point": true
                },
                "scale": {
                    "useUnaggregatedDomain": true
                }
            },
            "data": {
                "url": "cars.json"
            }
        },
        "sol": {
            "violations": {
                "aggregate_count": [
                    {
                        "description": "Count as aggregate op.",
                        "type": "soft",
                        "name": "aggregate_count",
                        "asp": "soft(aggregate_count,E) :- aggregate(E,count).",
                        "weight": 0,
                        "witness": "soft(aggregate_count,e0)"
                    }
                ],
                "type_q": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_q",
                        "asp": "soft(type_q,E) :- type(E,quantitative).",
                        "weight": 0,
                        "witness": "soft(type_q,e0)"
                    },
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_q",
                        "asp": "soft(type_q,E) :- type(E,quantitative).",
                        "weight": 0,
                        "witness": "soft(type_q,e1)"
                    }
                ],
                "encoding_field": [
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e1)"
                    }
                ],
                "encoding": [
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e0)"
                    },
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e1)"
                    }
                ],
                "bin": [
                    {
                        "description": "Prefer to not bin.",
                        "type": "soft",
                        "name": "bin",
                        "asp": "soft(bin,E) :- bin(E,_).",
                        "weight": 2,
                        "witness": "soft(bin,e1)"
                    }
                ],
                "aggregate": [
                    {
                        "description": "Prefer to use raw (no aggregate).",
                        "type": "soft",
                        "name": "aggregate",
                        "asp": "soft(aggregate,E) :- aggregate(E,_).",
                        "weight": 1,
                        "witness": "soft(aggregate,e0)"
                    }
                ],
                "continuous_y": [
                    {
                        "description": "Continuous on y channel.",
                        "type": "soft",
                        "name": "continuous_y",
                        "asp": "soft(continuous_y,E) :- channel(E,y), continuous(E).",
                        "weight": 0,
                        "witness": "soft(continuous_y,e0)"
                    }
                ],
                "ordered_x": [
                    {
                        "description": "Ordered on x channel.",
                        "type": "soft",
                        "name": "ordered_x",
                        "asp": "soft(ordered_x,E) :- channel(E,x), discrete(E), not type(E,nominal).",
                        "weight": 1,
                        "witness": "soft(ordered_x,e1)"
                    }
                ],
                "c_d_no_overlap_point": [
                    {
                        "description": "Continuous by discrete for point mark with no overlap.",
                        "type": "soft",
                        "name": "c_d_no_overlap_point",
                        "asp": "soft(c_d_no_overlap_point) :- is_c_d, no_overlap, mark(point).",
                        "weight": 20,
                        "witness": "soft(c_d_no_overlap_point,_placeholder)"
                    }
                ]
            },
            "facts": [
                "data(\"cars.json\")",
                "mark(point)",
                "zero(e0)",
                "aggregate(e0,count)",
                "bin(e1,10)",
                "channel(e0,y)",
                "channel(e1,x)",
                "field(e1,\"horsepower\")",
                "soft(aggregate_count,e0)",
                "soft(type_q,e0)",
                "soft(type_q,e1)",
                "soft(encoding_field,e1)",
                "soft(encoding,e0)",
                "soft(encoding,e1)",
                "soft(bin,e1)",
                "soft(aggregate,e0)",
                "type(e0,quantitative)",
                "type(e1,quantitative)",
                "soft(continuous_y,e0)",
                "soft(ordered_x,e1)",
                "soft(c_d_no_overlap_point,_placeholder)"
            ]
        }
    },
    "143": {
        "type": "chart",
        "id": "143",
        "comparator": "<",
        "vlSpec": {
            "mark": "point",
            "encoding": {
                "x": {
                    "aggregate": "count",
                    "type": "quantitative"
                },
                "y": {
                    "bin": true,
                    "field": "horsepower",
                    "type": "quantitative"
                }
            },
            "config": {
                "line": {
                    "point": true
                },
                "scale": {
                    "useUnaggregatedDomain": true
                }
            },
            "data": {
                "url": "cars.json"
            }
        },
        "sol": {
            "violations": {
                "aggregate_count": [
                    {
                        "description": "Count as aggregate op.",
                        "type": "soft",
                        "name": "aggregate_count",
                        "asp": "soft(aggregate_count,E) :- aggregate(E,count).",
                        "weight": 0,
                        "witness": "soft(aggregate_count,e0)"
                    }
                ],
                "type_q": [
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_q",
                        "asp": "soft(type_q,E) :- type(E,quantitative).",
                        "weight": 0,
                        "witness": "soft(type_q,e0)"
                    },
                    {
                        "description": "Prefer quantitative > ordinal > nominal.",
                        "type": "soft",
                        "name": "type_q",
                        "asp": "soft(type_q,E) :- type(E,quantitative).",
                        "weight": 0,
                        "witness": "soft(type_q,e1)"
                    }
                ],
                "encoding_field": [
                    {
                        "description": "Prefer to use fewer encodings with fields (count does not have a field).",
                        "type": "soft",
                        "name": "encoding_field",
                        "asp": "soft(encoding_field,E) :- encoding(E), field(E,_).",
                        "weight": 6,
                        "witness": "soft(encoding_field,e1)"
                    }
                ],
                "encoding": [
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e0)"
                    },
                    {
                        "description": "Prefer to use fewer encodings.",
                        "type": "soft",
                        "name": "encoding",
                        "asp": "soft(encoding,E) :- encoding(E).",
                        "weight": 0,
                        "witness": "soft(encoding,e1)"
                    }
                ],
                "bin": [
                    {
                        "description": "Prefer to not bin.",
                        "type": "soft",
                        "name": "bin",
                        "asp": "soft(bin,E) :- bin(E,_).",
                        "weight": 2,
                        "witness": "soft(bin,e1)"
                    }
                ],
                "aggregate": [
                    {
                        "description": "Prefer to use raw (no aggregate).",
                        "type": "soft",
                        "name": "aggregate",
                        "asp": "soft(aggregate,E) :- aggregate(E,_).",
                        "weight": 1,
                        "witness": "soft(aggregate,e0)"
                    }
                ],
                "continuous_x": [
                    {
                        "description": "Continuous on x channel.",
                        "type": "soft",
                        "name": "continuous_x",
                        "asp": "soft(continuous_x,E) :- channel(E,x), continuous(E).",
                        "weight": 0,
                        "witness": "soft(continuous_x,e0)"
                    }
                ],
                "ordered_y": [
                    {
                        "description": "Ordered on y channel.",
                        "type": "soft",
                        "name": "ordered_y",
                        "asp": "soft(ordered_y,E) :- channel(E,y), discrete(E), not type(E,nominal).",
                        "weight": 0,
                        "witness": "soft(ordered_y,e1)"
                    }
                ],
                "c_d_no_overlap_point": [
                    {
                        "description": "Continuous by discrete for point mark with no overlap.",
                        "type": "soft",
                        "name": "c_d_no_overlap_point",
                        "asp": "soft(c_d_no_overlap_point) :- is_c_d, no_overlap, mark(point).",
                        "weight": 20,
                        "witness": "soft(c_d_no_overlap_point,_placeholder)"
                    }
                ],
                "orientation_binned": [
                    {
                        "description": "Chart orientation for bar and tick (with and without bin). Binned fields have short labels if they are quantitative while otherwise labels can be long.",
                        "type": "soft",
                        "name": "orientation_binned",
                        "asp": "soft(orientation_binned) :- bin(E,_), type(E,quantitative), not channel(E,x).",
                        "weight": 1,
                        "witness": "soft(orientation_binned,_placeholder)"
                    }
                ]
            },
            "facts": [
                "data(\"cars.json\")",
                "mark(point)",
                "zero(e0)",
                "aggregate(e0,count)",
                "bin(e1,10)",
                "channel(e0,x)",
                "channel(e1,y)",
                "field(e1,\"horsepower\")",
                "soft(aggregate_count,e0)",
                "soft(type_q,e0)",
                "soft(type_q,e1)",
                "soft(encoding_field,e1)",
                "soft(encoding,e0)",
                "soft(encoding,e1)",
                "soft(bin,e1)",
                "soft(aggregate,e0)",
                "type(e0,quantitative)",
                "type(e1,quantitative)",
                "soft(continuous_x,e0)",
                "soft(ordered_y,e1)",
                "soft(c_d_no_overlap_point,_placeholder)",
                "soft(orientation_binned,_placeholder)"
            ]
        }
    }
}